[{"D:\\git\\my-app\\src\\index.tsx":"1","D:\\git\\my-app\\src\\serviceWorker.js":"2","D:\\git\\my-app\\src\\app\\App.tsx":"3","D:\\git\\my-app\\src\\app\\store.tsx":"4","D:\\git\\my-app\\src\\app\\Header.tsx":"5","D:\\git\\my-app\\src\\features\\movies\\moviesListPage.tsx":"6","D:\\git\\my-app\\src\\features\\movies\\movieDetails.tsx":"7","D:\\git\\my-app\\src\\features\\movies\\moviesSlice.tsx":"8","D:\\git\\my-app\\src\\features\\filter\\filerPage.tsx":"9","D:\\git\\my-app\\src\\features\\filter\\filterSlice.tsx":"10","D:\\git\\my-app\\src\\features\\search\\moviesSearchSlice.tsx":"11","D:\\git\\my-app\\src\\features\\search\\moviesSearchPage.tsx":"12","D:\\git\\my-app\\src\\app\\Navbar.tsx":"13","D:\\git\\my-app\\src\\features\\movies\\moviesList.tsx":"14","D:\\git\\my-app\\src\\app\\Spinner.tsx":"15","D:\\git\\my-app\\src\\features\\filter\\filterGenres.tsx":"16","D:\\git\\my-app\\src\\features\\filter\\filterSorting.tsx":"17","D:\\git\\my-app\\src\\api\\movieApi.tsx":"18","D:\\git\\my-app\\src\\features\\search\\moviesSearchInput.tsx":"19","D:\\git\\my-app\\src\\features\\search\\moviesSearchList.tsx":"20","D:\\git\\my-app\\src\\features\\movies\\moviesListItem.tsx":"21","D:\\git\\my-app\\src\\features\\search\\moviesSearchItem.tsx":"22","D:\\git\\my-app\\src\\app\\image.tsx":"23"},{"size":675,"mtime":1606488671319,"results":"24","hashOfConfig":"25"},{"size":4951,"mtime":499162500000,"results":"26","hashOfConfig":"25"},{"size":919,"mtime":1606827683005,"results":"27","hashOfConfig":"25"},{"size":603,"mtime":1606828120114,"results":"28","hashOfConfig":"25"},{"size":668,"mtime":1606735896868,"results":"29","hashOfConfig":"25"},{"size":2675,"mtime":1606836501069,"results":"30","hashOfConfig":"25"},{"size":5317,"mtime":1606736806023,"results":"31","hashOfConfig":"25"},{"size":2172,"mtime":1606835932667,"results":"32","hashOfConfig":"25"},{"size":582,"mtime":1606834745457,"results":"33","hashOfConfig":"25"},{"size":1295,"mtime":1606831631501,"results":"34","hashOfConfig":"25"},{"size":1472,"mtime":1606671588749,"results":"35","hashOfConfig":"25"},{"size":2720,"mtime":1606836174939,"results":"36","hashOfConfig":"25"},{"size":3598,"mtime":1606828070877,"results":"37","hashOfConfig":"25"},{"size":1244,"mtime":1606836113373,"results":"38","hashOfConfig":"25"},{"size":389,"mtime":1606734918686,"results":"39","hashOfConfig":"25"},{"size":1444,"mtime":1606585652369,"results":"40","hashOfConfig":"25"},{"size":1559,"mtime":1606834502703,"results":"41","hashOfConfig":"25"},{"size":4359,"mtime":1606836041810,"results":"42","hashOfConfig":"25"},{"size":1259,"mtime":1606730899596,"results":"43","hashOfConfig":"25"},{"size":572,"mtime":1606670838647,"results":"44","hashOfConfig":"25"},{"size":2152,"mtime":1606735940980,"results":"45","hashOfConfig":"25"},{"size":1139,"mtime":1606671350186,"results":"46","hashOfConfig":"25"},{"size":657,"mtime":1606671576067,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"2u5vyz",{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"50"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"50"},"D:\\git\\my-app\\src\\index.tsx",[],[],"D:\\git\\my-app\\src\\serviceWorker.js",["113","114","115"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",[],"D:\\git\\my-app\\src\\app\\App.tsx",["116"],"import React from 'react'\r\nimport { Route, Switch } from 'react-router'\r\nimport { Header } from './Header'\r\nimport { MoviesListPage } from '../features/movies/moviesListPage'\r\nimport { MovieDetails } from '../features/movies/movieDetails'\r\nimport { FilterPage } from '../features/filter/filerPage'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path='/' component={MoviesListPage} />\r\n        <Route exact path='/upcoming' component={MoviesListPage} />\r\n        <Route exact path='/top_rated' component={MoviesListPage} />\r\n        <Route exact path='/search' component={MoviesListPage} />\r\n        <Route exact path='/favorite' component={MoviesListPage} />\r\n\r\n        <Route exact path='/filter' component={FilterPage} />\r\n\r\n        <Route exact path={`/:media_type/:movieId`} component={MovieDetails} />\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","D:\\git\\my-app\\src\\app\\store.tsx",[],"D:\\git\\my-app\\src\\app\\Header.tsx",["117"],"import React from \"react\";\r\nimport { Link  } from \"react-router-dom\";\r\nimport {MoviesSearchPage} from \"../features/search/moviesSearchPage\";\r\nimport  {Navbar}  from \"./Navbar\";\r\nimport logo from \"./../style/react-logo.png\";\r\n\r\nimport style from './header.module.css'\r\nexport const Header = () => {\r\n\r\n  return (\r\n    <header className={style.header}>\r\n      <div className={style.container}>\r\n        <Link className={style.logo} to=\"/\">\r\n          <img src={logo} className={style.img} alt=\"logo\" />\r\n          <h1 className={style.title}>Movies-Search</h1>\r\n        </Link>\r\n        <MoviesSearchPage />\r\n        <Navbar />\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\n","D:\\git\\my-app\\src\\features\\movies\\moviesListPage.tsx",["118","119"],"import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nimport { pathnameType } from '../../api/movieApi'\r\nimport { fetchMovies } from './moviesSlice'\r\nimport { RootState } from '../../app/store'\r\nimport ListMovies from './moviesList'\r\nimport Spinner from './../../app/Spinner'\r\nimport style from './moviesListPage.module.css'\r\n\r\ninterface ListProps {\r\n  grid?: string\r\n  movieId?: string\r\n}\r\n\r\nexport const MoviesListPage = ({ movieId, grid = '' }: ListProps) => {\r\n  const [page, setPage] = useState(0)\r\n\r\n  const dispatch = useDispatch()\r\n  const location = useLocation()\r\n\r\n  const { genres, sortBy } = useSelector((state: RootState) => state.filter)\r\n  const { moviesList, favorite, totalPages, moviesStatus } = useSelector(\r\n    (state: RootState) => state.movies\r\n  )\r\n  const pathname = location.pathname as pathnameType\r\n  const search = location.search\r\n\r\n  useEffect(() => {\r\n    if (pathname === '/favorite') return\r\n\r\n    if (movieId) {\r\n      dispatch(\r\n        fetchMovies({\r\n          pathname: '/similar',\r\n          options: {\r\n            search: movieId,\r\n          },\r\n        })\r\n      )\r\n      return\r\n    }\r\n\r\n    const selectedGenres = genres\r\n      .filter((genre) => genre.selected)\r\n      .map((genre) => genre.id)\r\n\r\n    dispatch(\r\n      fetchMovies({\r\n        pathname,\r\n        options: {\r\n          search,\r\n          genres: selectedGenres,\r\n          sortBy,\r\n          page: page + 1,\r\n        },\r\n      })\r\n    )\r\n  }, [pathname, sortBy, movieId, genres, page, search])\r\n\r\n  useEffect(() => {\r\n    setPage(0)\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: \"smooth\"\r\n    })\r\n  }, [location.key, sortBy, genres])\r\n\r\n  const handleScroll = () => {\r\n    if (\r\n      window.innerHeight + document.documentElement.scrollTop !==\r\n      document.documentElement.offsetHeight\r\n    )\r\n      return\r\n    if (movieId) return\r\n    console.log(totalPages);\r\n    if (totalPages <= 1) return\r\n    setPage((page) => page + 1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll)\r\n    return () => window.removeEventListener('scroll', handleScroll)\r\n  }, [location.key, totalPages])\r\n\r\n  let listMovie\r\n\r\n  if (pathname === '/favorite') {\r\n    listMovie = favorite\r\n  } else {\r\n    listMovie = moviesList\r\n  }\r\n\r\n  return (\r\n    <div className={style.listMovies}>\r\n      {listMovie.length === 0 && moviesStatus === 'succeeded' ? (\r\n        <h1>Not found</h1>\r\n      ) : (\r\n        <ListMovies movies={listMovie} favorite={favorite} />\r\n      )}\r\n\r\n      {moviesStatus == 'pendiing' && <Spinner />}\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\movies\\movieDetails.tsx",["120"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport { addFavorite, deleteFavorite } from './moviesSlice'\r\nimport { MoviesListPage } from './moviesListPage'\r\nimport { DetailsResult, fetchDetails, MovieType } from '../../api/movieApi'\r\nimport {Image} from '../../app/image'\r\nimport vote from './../../style/star.svg'\r\nimport add from './../../style/correct.svg'\r\nimport remove from './../../style/minus.svg'\r\n\r\nimport { RootState } from '../../app/store'\r\n\r\nimport style from './movieDetails.module.css'\r\n\r\ninterface PropsParams {\r\n  movieId: string\r\n  media_type: string\r\n}\r\n\r\nexport const MovieDetails = () => {\r\n  const [data, setData] = React.useState<DetailsResult | null>(null)\r\n  const [error, setError] = React.useState(null)\r\n  const { movieId, media_type } = useParams<PropsParams>()\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await fetchDetails(movieId)\r\n        setData(data)\r\n        setError(null)\r\n      } catch (err) {\r\n        setError(err)\r\n      }\r\n    }\r\n    fetchData()\r\n  }, [media_type, movieId])\r\n\r\n  const favorite = useSelector((state: RootState) => state.movies.favorite)\r\n  const isFav = favorite.some((favorite: MovieType) => {\r\n    return favorite.id == movieId\r\n  })\r\n\r\n  if (error) {\r\n    return <h2 className='movie-details__title'>{error}</h2>\r\n  }\r\n\r\n  if (!data) {\r\n    return null\r\n  }\r\n\r\n  const {\r\n    title,\r\n    vote_average,\r\n    poster_path,\r\n    overview,\r\n    tagline,\r\n    release_date,\r\n    first_air_date,\r\n    genres = [],\r\n    runtime,\r\n    episode_run_time,\r\n    name,\r\n    id,\r\n    production_countries = [],\r\n    budget = 0,\r\n  } = data.movieDetails\r\n\r\n  const handleFavorite = () => {\r\n    if (isFav) {\r\n      dispatch(deleteFavorite(data.movieDetails.id))\r\n    } else {\r\n      dispatch(\r\n        addFavorite({\r\n          id,\r\n          title,\r\n          vote_average,\r\n          poster_path,\r\n          release_date,\r\n          name,\r\n          first_air_date,\r\n          media_type,\r\n        })\r\n      )\r\n    }\r\n  }\r\n\r\n  const genresList = genres.length\r\n    ? genres.map((movie) => ` ${movie.name.toLowerCase()}`).join()\r\n    : null\r\n  const countries = production_countries.length\r\n    ? production_countries.map((e) => ` ${e.name}`).join()\r\n    : null\r\n  const castList = data.cast\r\n    ? data.cast\r\n        .slice(0, 10)\r\n        .map((item) => ` ${item.name}`)\r\n        .join()\r\n    : null\r\n  const formatBudget = `$ ${budget\r\n    .toString()\r\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.')}`\r\n\r\n  return (\r\n    <div className={style.movieDetails}>\r\n      <div className={style.container}>\r\n        <div className={style.leftColumn}>\r\n          <Image src={`https://image.tmdb.org/t/p/w500/${poster_path}`} />\r\n        </div>\r\n        <div className={style.rightColumn}>\r\n          <div className={style.heading}>\r\n            <h2 className={style.title}> {title || name} </h2>\r\n            <span className={style.vote}>\r\n              {`${vote_average} `}\r\n              <img className={style.thumb} src={vote} alt='vote' />\r\n            </span>\r\n          </div>\r\n\r\n          {release_date || first_air_date ? (\r\n            <div className={style.info}>\r\n              <h3 className={style.tagline}>Year</h3>\r\n              <p className={style.text}>\r\n                {(release_date || first_air_date).split('-')[0]}\r\n              </p>\r\n            </div>\r\n          ) : null}\r\n\r\n          {countries ? (\r\n            <div className={style.info}>\r\n              <h3 className={style.tagline}>Country</h3>\r\n              <p className={style.text}>{countries}</p>\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className={style.info}>\r\n            <h3 className={style.tagline}>Genres</h3>\r\n            <p className={style.text}>{genresList}</p>\r\n          </div>\r\n\r\n          {tagline ? (\r\n            <div className={style.info}>\r\n              <h3 className={style.tagline}>Tag</h3>\r\n              <p className={style.text}>{tagline}</p>\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className={style.info}>\r\n            <h3 className={style.tagline}>Cast</h3>\r\n            <p className={style.text}>{castList}</p>\r\n          </div>\r\n\r\n          <div className={style.info}>\r\n            <h3 className={style.tagline}>Runtime</h3>\r\n            <p className={style.text}>\r\n              {episode_run_time || runtime} {' min'}\r\n            </p>\r\n          </div>\r\n\r\n          <div className={style.info}>\r\n            <h3 className={style.tagline}>Budget</h3>\r\n            <p className={style.text}>{formatBudget}</p>\r\n          </div>\r\n\r\n          <h2 className={style.subtitle}>Overview</h2>\r\n          <p className={style.overview}> {overview} </p>\r\n\r\n          <button className={style.btn} onClick={handleFavorite}>\r\n            <img src={isFav ? add : remove} alt='favorite' />\r\n            {isFav ? 'Delete from Favorite' : 'Add to Favorite'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className={style.recommend}>\r\n        <h2 className={style.headline}>Recommendations</h2>\r\n        {movieId ? (\r\n          <MoviesListPage movieId={id} grid={'list-movies--small'} />\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\movies\\moviesSlice.tsx",["121"],"import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'\r\nimport {\r\n  fetchMovieType,\r\n  getMovies,\r\n  Options,\r\n  MoviesResult,\r\n  MovieType,\r\n} from './../../api/movieApi'\r\n\r\ninterface fetchProps {\r\n  pathname: fetchMovieType\r\n  options: Options\r\n}\r\n\r\nexport const fetchMovies = createAsyncThunk(\r\n  'movies/fetchMovies',\r\n  async (props: fetchProps) => {\r\n    const { pathname, options } = props\r\n    const moviesSearch = await getMovies(pathname, options)\r\n    return moviesSearch\r\n  }\r\n)\r\n\r\ninterface MovieState {\r\n  moviesList: MovieType[]\r\n  moviesStatus: 'indle' | 'pendiing' | 'succeeded' | 'failed'\r\n  totalPages: number\r\n  favorite: MovieType[]\r\n  error: null | string\r\n}\r\n\r\nconst favoriteList = window.localStorage.getItem('favorite')\r\n  ? JSON.parse(window.localStorage.getItem('favorite') || '{}')\r\n  : []\r\n\r\nconst initialState: MovieState = {\r\n  moviesList: [],\r\n  moviesStatus: 'indle',\r\n  totalPages: 0,\r\n  favorite: favoriteList,\r\n  error: null,\r\n}\r\n\r\nconst moviesSlice = createSlice({\r\n  name: 'movies',\r\n  initialState,\r\n  reducers: {\r\n    addFavorite: (state, action: PayloadAction<MovieType>) => {\r\n      state.favorite.push(action.payload)\r\n      window.localStorage.setItem('favorite', JSON.stringify(state.favorite))\r\n    },\r\n    deleteFavorite: (state, action: PayloadAction<string>) => {\r\n      state.favorite = state.favorite.filter(\r\n        (movie: MovieType) => movie.id !== action.payload\r\n      )\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchMovies.pending, (state) => {\r\n      state.moviesStatus = 'pendiing'\r\n    })\r\n\r\n    builder.addCase(fetchMovies.fulfilled, (state, action) => {\r\n      const { moviesList, totalPages, page } = action.payload\r\n      state.moviesStatus = 'succeeded'\r\n      state.totalPages = totalPages\r\n      if (page > 1) {\r\n        state.moviesList.push(...moviesList)\r\n      } else {\r\n        state.moviesList = moviesList\r\n      }\r\n    })\r\n\r\n    builder.addCase(fetchMovies.rejected, (state) => {\r\n      state.moviesStatus = 'failed'\r\n    })\r\n  },\r\n})\r\n\r\nexport const { addFavorite, deleteFavorite } = moviesSlice.actions\r\n\r\nexport default moviesSlice.reducer\r\n","D:\\git\\my-app\\src\\features\\filter\\filerPage.tsx",["122"],"import React from 'react'\r\nimport { FilterGenres } from './filterGenres'\r\nimport { FilterSorting } from './filterSorting'\r\nimport { MoviesListPage } from '../movies/moviesListPage'\r\nimport style from './filerPage.module.css'\r\n\r\nexport const FilterPage = () => {\r\n  return (\r\n    <div className={style.filter}>\r\n      <div className={style.sort}>\r\n        <FilterSorting />\r\n      </div>\r\n      <div className={style.genres}>\r\n        <FilterGenres />\r\n      </div>\r\n      <div className={style.movies}>\r\n        <MoviesListPage grid={'medium'} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\filter\\filterSlice.tsx",[],"D:\\git\\my-app\\src\\features\\search\\moviesSearchSlice.tsx",[],"D:\\git\\my-app\\src\\features\\search\\moviesSearchPage.tsx",["123","124"],"import React, { useState, useEffect, useRef, useCallback } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { debounce } from 'lodash'\r\nimport { getMovies,MovieType } from '../../api/movieApi'\r\nimport { MoviesSearchInput } from './moviesSearchInput'\r\nimport { MoviesSearchList } from './moviesSearchList'\r\nimport style from './moviesSearchPage.module.css'\r\n\r\ntype searchStatus = 'indle' | 'pendiing' | 'succeeded' | 'failed'\r\n\r\nexport const MoviesSearchPage = () => {\r\n  const [isHidden, setHidden] = useState(false)\r\n  const [list, setList] = useState<MovieType[]>([])\r\n  const [searchStatus, setStatus] = useState<searchStatus>('indle') \r\n  const [error, setError] = useState(null)\r\n  const history = useHistory()\r\n  const location = useLocation()\r\n\r\n  const wrapperRef = React.useRef<HTMLDivElement | null>(null)\r\n\r\n  const delay = useCallback(\r\n    debounce((value: string) => {\r\n      setStatus(\"pendiing\")\r\n      const fetchS = async () => {\r\n        try {\r\n          const data = await getMovies('/search', {search: value})\r\n          const list = data.moviesList.slice(0, 5)\r\n          setList(list)\r\n          setStatus('succeeded')\r\n        } catch (err){\r\n          setStatus('failed')\r\n          setError(err)\r\n        }\r\n      }\r\n      if (value.length) {\r\n        fetchS()\r\n      } else {\r\n        setList([])\r\n      }\r\n    }, 500),\r\n    []\r\n  )\r\n\r\n  useEffect(() => {\r\n    setHidden(true)\r\n  }, [location.key])\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (e: MouseEvent): void => {\r\n      if (\r\n        wrapperRef.current &&\r\n        !wrapperRef.current.contains(e.target as Node)\r\n      ) {\r\n        setHidden(true)\r\n      } else {\r\n        setHidden(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener('mousedown', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside)\r\n    }\r\n  },[])\r\n\r\n  const onSearchSubmit = (value: string): void => {\r\n    history.push({\r\n      pathname: '/search',\r\n      search: value\r\n    })\r\n  }\r\n\r\n  let previewList\r\n\r\n  if (list.length === 0 && searchStatus === 'succeeded') {\r\n    previewList = <h2>Not found</h2>\r\n  } else if (error) {\r\n    <h2>{error}</h2>\r\n  } else {\r\n    previewList = <MoviesSearchList movies={list} />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={style.search} ref={wrapperRef}>\r\n        <MoviesSearchInput\r\n          onSearchChange={delay}\r\n          onSearchSubmit={onSearchSubmit}\r\n        />\r\n        <div\r\n          className={\r\n            isHidden\r\n              ? `${style.container} ${style.hidden}`\r\n              : `${style.container}`\r\n          }\r\n        >\r\n          {previewList}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\app\\Navbar.tsx",["125"],"import React, { useEffect, useRef } from 'react'\r\nimport { NavLink, useLocation } from 'react-router-dom'\r\nimport github from './../style/github.svg'\r\nimport style from './navbar.module.css'\r\n\r\nexport const Navbar = () => {\r\n  \r\n  const wrapperRef = useRef<HTMLElement | null>(null)\r\n  const location = useLocation()\r\n  const [isHidden, setHidden] = React.useState<boolean>(true)\r\n\r\n  useEffect(() => {\r\n    function handleClickOutside(e: MouseEvent): void {\r\n      if (\r\n        wrapperRef.current &&\r\n        !wrapperRef.current.contains(e.target as Node)\r\n      ) {\r\n        document.body.classList.remove('overlay')\r\n        setHidden(true)\r\n      }\r\n    }\r\n\r\n    document.addEventListener('mousedown', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setHidden(true)\r\n    document.body.classList.remove('overlay')\r\n  }, [location.key])\r\n\r\n  const handleClickBtn = () => {\r\n    if (isHidden) {\r\n      setHidden(false)\r\n      document.body.classList.toggle('overlay')\r\n    } else {\r\n      setHidden(true)\r\n      document.body.classList.toggle('overlay')\r\n    }\r\n  }\r\n  return (\r\n    <nav className={style.nav} ref={wrapperRef}>\r\n      <div className={style.container}>\r\n        <div\r\n          className={\r\n            isHidden\r\n              ? `${style.toggle}`\r\n              : `${style.toggle} ${style.toggleHidden}`\r\n          }\r\n        >\r\n          <button\r\n            className={style.btn}\r\n            onClick={() => handleClickBtn()}\r\n          ></button>\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n        </div>\r\n        <ul\r\n          className={\r\n            isHidden ? `${style.items}` : `${style.items} ${style.itemsHidden}`\r\n          }\r\n        >\r\n          <li className={style.item}>\r\n            <NavLink\r\n              className={style.link}\r\n              exact\r\n              activeClassName={style.selected}\r\n              to='/'\r\n            >\r\n              Popular\r\n            </NavLink>\r\n          </li>\r\n          <li className={style.item}>\r\n            <NavLink\r\n              className={style.link}\r\n              activeClassName={style.selected}\r\n              to='/upcoming'\r\n            >\r\n              Up comning\r\n            </NavLink>\r\n          </li>\r\n          <li className={style.item}>\r\n            <NavLink\r\n              className={style.link}\r\n              activeClassName={style.selected}\r\n              to='/top_rated'\r\n            >\r\n              Top rated\r\n            </NavLink>\r\n          </li>\r\n          <li className={style.item}>\r\n            <NavLink\r\n              className={style.link}\r\n              activeClassName={style.selected}\r\n              to='/favorite'\r\n            >\r\n              Favorite\r\n            </NavLink>\r\n          </li>\r\n          <li className={style.item}>\r\n            <NavLink\r\n              className={style.link}\r\n              activeClassName={style.selected}\r\n              to='/filter'\r\n            >\r\n              Filter\r\n            </NavLink>\r\n          </li>\r\n          <li className={style.item}>\r\n            <a\r\n              className={style.link}\r\n              href='https://github.com/ethnicolr/Movie-Search'\r\n              target='_blank'\r\n              rel='noopener noreferrer'\r\n            >\r\n              <img\r\n                src={github}\r\n                alt='github'\r\n                className={style.icon}\r\n                width='40'\r\n              />\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\movies\\moviesList.tsx",["126"],"import React, {useState, useEffect} from 'react'\r\n\r\nimport { MovieType } from '../../api/movieApi'\r\nimport Movie from './moviesListItem'\r\nimport style from './moviesList.module.css'\r\n\r\ninterface MoviesProp {\r\n  movies: MovieType[]\r\n  favorite: MovieType[]\r\n}\r\n\r\nconst List = ({ movies, favorite }: MoviesProp) => {\r\n  const [isScroll, setScroll] = useState(false);\r\n\r\n  function toggleVisibility(){\r\n    if(window.pageYOffset > 300){\r\n      setScroll(true)\r\n    } else {\r\n      setScroll(false)\r\n    }\r\n  }\r\n\r\n  function scrollToTop() {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: \"smooth\"\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    document.addEventListener('scroll', toggleVisibility)\r\n    return () => {\r\n      document.removeEventListener('scroll', toggleVisibility)\r\n    }\r\n  })\r\n  return (\r\n    <ul className={style.moviesList}>\r\n      {movies.map((movie) => {\r\n        const isFav = favorite.some((favorite) => favorite.id === movie.id)\r\n        return (\r\n          <li className={style.item} key={movie.id}>\r\n            <Movie movieData={movie} isFav={isFav} />\r\n          </li>\r\n        )\r\n      })}\r\n      {isScroll && <div onClick={scrollToTop} className={style.scroll}>Top</div>}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default List\r\n","D:\\git\\my-app\\src\\app\\Spinner.tsx",["127"],"import React from 'react'\r\nimport style from './spiner.module.css'\r\n\r\nexport const Spinner = () => {\r\n  return (\r\n    <div className={style.container}>\r\n      <div className={style.threeDots}>\r\n        <span className={style.dot}></span>\r\n        <span className={style.dot}></span>\r\n        <span className={style.dot}></span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Spinner\r\n","D:\\git\\my-app\\src\\features\\filter\\filterGenres.tsx",["128"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { changeGenres } from './filterSlice'\r\nimport { RootState } from '../../app/store'\r\nimport { fetchGenres } from './filterSlice'\r\n\r\nimport style from './filterGenres.module.css'\r\n\r\nexport const FilterGenres = () => {\r\n  const dispatch = useDispatch()\r\n  const genres = useSelector((state: RootState) => state.filter.genres)\r\n  useEffect(() => {\r\n    if (genres.length === 0) {\r\n      dispatch(fetchGenres())\r\n    }\r\n  }, [])\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    dispatch(changeGenres(e.currentTarget.name))\r\n  }\r\n\r\n  return (\r\n    <div className={style.genres}>\r\n      <h3 className={style.title}>Genres</h3>\r\n      <ul className={style.list}>\r\n        {genres.length\r\n          ? genres.map((genre) => {\r\n              return (\r\n                <li className={style.item} key={genre.id}>\r\n                  <label className={style.label}>\r\n                    {genre.name}\r\n                    <input\r\n                      type='checkbox'\r\n                      onChange={handleChange}\r\n                      checked={genre.selected}\r\n                      name={genre.id}\r\n                    />\r\n                    <span className={style.checkmark} />\r\n                  </label>\r\n                </li>\r\n              )\r\n            })\r\n          : null}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\filter\\filterSorting.tsx",["129"],"import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { sortBy } from './filterSlice'\r\nimport { RootState } from './../../app/store'\r\nimport style from './filterSorting.module.css'\r\n\r\nexport const FilterSorting = () => {\r\n  const dispatch = useDispatch()\r\n  const active = useSelector((state: RootState) => state.filter.sortBy)\r\n\r\n  const handleSort = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    dispatch(sortBy(e.currentTarget.name))\r\n  }\r\n\r\n  const sortActivity = (field: string) => {\r\n    return active === `${field}.desc`\r\n      ? `${style.sortBtn} ${style.desc}`\r\n      : `${style.sortBtn} ${style.asc}`\r\n  }\r\n\r\n  return (\r\n    <div className={style.sort}>\r\n      <h3 className={style.title}>Sort by</h3>\r\n      <ul className={style.items}>\r\n        <li className={style.item}>\r\n          <button\r\n            className={sortActivity('popularity')}\r\n            name='popularity'\r\n            onClick={handleSort}\r\n          >\r\n            popularity\r\n          </button>\r\n        </li>\r\n        <li className={style.item}>\r\n          <button\r\n            className={sortActivity('release_date')}\r\n            name='release_date'\r\n            onClick={handleSort}\r\n          >\r\n            date\r\n          </button>\r\n        </li>\r\n        <li className={style.item}>\r\n          <button\r\n            className={sortActivity('vote_average')}\r\n            name='vote_average'\r\n            onClick={handleSort}\r\n          >\r\n            rating\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\api\\movieApi.tsx",[],"D:\\git\\my-app\\src\\features\\search\\moviesSearchInput.tsx",["130","131"],"import React, { useState } from 'react'\r\n\r\nimport seach from './../../style/search.svg'\r\nimport style from './moviesSearchInput.module.css'\r\ninterface InputProps {\r\n  onSearchChange(value: string): void\r\n  onSearchSubmit(value: string): void\r\n}\r\n\r\nexport const MoviesSearchInput = ({\r\n  onSearchChange,\r\n  onSearchSubmit,\r\n}: InputProps) => {\r\n  const [value, setValue] = useState('')\r\n  const inputEl = React.useRef<HTMLInputElement>(null!)\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    const value = e.currentTarget.value\r\n    setValue(value)\r\n    onSearchChange(value)\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault()\r\n    if (value.length) {\r\n      onSearchSubmit(value)\r\n      inputEl.current.blur()\r\n      document.body.style.overflow = 'auto'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          ref={inputEl}\r\n          className={style.input}\r\n          type='text'\r\n          value={value}\r\n          onChange={handleChange}\r\n          placeholder='Seacrh movie...'\r\n        />\r\n        <button className={style.btn}>\r\n          <img src={seach} alt='seach' />\r\n        </button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\search\\moviesSearchList.tsx",[],"D:\\git\\my-app\\src\\features\\movies\\moviesListItem.tsx",["132"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {Image} from \"../../app/image\";\r\nimport add from \"./../../style/correct.svg\";\r\nimport remove from \"./../../style/minus.svg\";\r\nimport star from \"./../../style/star.svg\";\r\nimport { addFavorite, deleteFavorite } from \"./moviesSlice\";\r\nimport { MovieType } from \"../../api/movieApi\";\r\nimport style from './moviesListItem.module.css'\r\n\r\ntype PropMovie = {\r\n  movieData: MovieType;\r\n  isFav: boolean;\r\n};\r\n\r\nconst Movie = ({ movieData, isFav }: PropMovie) => {\r\n  const {\r\n    title,\r\n    vote_average = 0,\r\n    poster_path,\r\n    release_date,\r\n    first_air_date,\r\n    name,\r\n    media_type,\r\n    id,\r\n  } = movieData;\r\n  const dispatch = useDispatch();\r\n\r\n  const handleFavorite = () => {\r\n    isFav ? dispatch(deleteFavorite(id)) : dispatch(addFavorite(movieData));\r\n  };\r\n\r\n  const link = media_type ? media_type : \"movie\";\r\n  return (\r\n    <div className={style.movie}>\r\n      <div className={style.img}>\r\n        <Link to={`/${link}/${id}`}>\r\n          <Image\r\n            src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\r\n          />\r\n        </Link>\r\n      </div>\r\n\r\n      <div className={style.desc}>\r\n        <Link to={`/${media_type}/${id}`}>\r\n          <h3 className={style.title}>{title || name}</h3>\r\n        </Link>\r\n        <div className={`${style.container} ${style.underline}`}>\r\n          <span className={style.text}>Age: </span>\r\n          <span className={style.text}>\r\n            {release_date || first_air_date\r\n              ? (release_date || first_air_date).split(/-/)[0]\r\n              : null}\r\n          </span>\r\n        </div>\r\n\r\n        <div className={style.container}>\r\n          <span className={style.text}>Rating</span>\r\n          <span className={style.text}>\r\n            {vote_average}\r\n            <img className={style.thumb} src={star} alt=\"vote\" />\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <button className={style.btn} onClick={handleFavorite}>\r\n        <img src={isFav ? add : remove} alt=\"favorite\" />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","D:\\git\\my-app\\src\\features\\search\\moviesSearchItem.tsx",["133"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { MovieType } from '../../api/movieApi'\r\nimport {Image} from '../../app/image'\r\nimport star from './../../style/star.svg'\r\nimport style from './moviesSearchItem.module.css'\r\n\r\ntype Props = { movie: MovieType }\r\n\r\nexport const MoviesSearchItem = ({ movie }: Props) => {\r\n  const {\r\n    title,\r\n    name,\r\n    release_date,\r\n    first_air_date,\r\n    poster_path,\r\n    id,\r\n    vote_average,\r\n    media_type,\r\n  } = movie\r\n  const link = media_type ? media_type : 'movie'\r\n  return (\r\n    <Link to={`/${link}/${id}`} className={style.item}>\r\n      <Image\r\n        src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\r\n        size={'40px'}\r\n      />\r\n      <h2 className={style.title}>\r\n        {`${title || name} ${\r\n          release_date || first_air_date\r\n            ? `(${(release_date || first_air_date).split(/-/)[0]})`\r\n            : null\r\n        }`}\r\n      </h2>\r\n      <span className={style.vote}>\r\n        {vote_average ? vote_average.toFixed(1) : 0}\r\n        <img className={style.thumb} src={star} alt='vote' />\r\n      </span>\r\n    </Link>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\app\\image.tsx",["134"],"import React, { useState, useEffect } from \"react\";\r\nimport error from \"./../style/error.png\";\r\n\r\n\r\ninterface Props {\r\n  src: string\r\n  size?: string\r\n}\r\n\r\nexport const Image = ({ src, size = \"100%\" }: Props) => {\r\n  const [fallback, setFallback] = useState(src);\r\n  const [errored, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setFallback(src);\r\n  }, [src]);\r\n\r\n  const handleError = () => {\r\n    if (!errored) {\r\n      setError(true);\r\n      setFallback(error);\r\n    }\r\n  };\r\n\r\n  const style = {\r\n    width: size,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <img src={fallback} onError={handleError} alt=\"poster\" style={style} />\r\n    </>\r\n  );\r\n};\r\n\r\n",{"ruleId":"135","severity":1,"message":"136","line":23,"column":8,"nodeType":"137","messageId":"138","endLine":23,"endColumn":33},{"ruleId":"135","severity":1,"message":"139","line":23,"column":26,"nodeType":"140","messageId":"141","endLine":23,"endColumn":32},{"ruleId":"135","severity":1,"message":"136","line":129,"column":8,"nodeType":"137","messageId":"138","endLine":129,"endColumn":29},{"ruleId":"135","severity":1,"message":"136","line":8,"column":1,"nodeType":"137","messageId":"138","endLine":8,"endColumn":15},{"ruleId":"135","severity":1,"message":"136","line":8,"column":23,"nodeType":"142","messageId":"138","endLine":8,"endColumn":28},{"ruleId":"135","severity":1,"message":"136","line":17,"column":31,"nodeType":"142","messageId":"138","endLine":17,"endColumn":69},{"ruleId":"143","severity":1,"message":"144","line":17,"column":43,"nodeType":"140","messageId":"145","endLine":17,"endColumn":47},{"ruleId":"135","severity":1,"message":"136","line":21,"column":29,"nodeType":"142","messageId":"138","endLine":21,"endColumn":34},{"ruleId":"143","severity":1,"message":"146","line":6,"column":3,"nodeType":"140","messageId":"145","endLine":6,"endColumn":15},{"ruleId":"135","severity":1,"message":"136","line":7,"column":27,"nodeType":"142","messageId":"138","endLine":7,"endColumn":32},{"ruleId":"143","severity":1,"message":"147","line":1,"column":38,"nodeType":"140","messageId":"145","endLine":1,"endColumn":44},{"ruleId":"135","severity":1,"message":"136","line":11,"column":33,"nodeType":"142","messageId":"138","endLine":11,"endColumn":38},{"ruleId":"135","severity":1,"message":"136","line":6,"column":23,"nodeType":"142","messageId":"138","endLine":6,"endColumn":28},{"ruleId":"135","severity":1,"message":"136","line":12,"column":14,"nodeType":"142","messageId":"138","endLine":12,"endColumn":51},{"ruleId":"135","severity":1,"message":"136","line":4,"column":24,"nodeType":"142","messageId":"138","endLine":4,"endColumn":29},{"ruleId":"135","severity":1,"message":"136","line":9,"column":29,"nodeType":"142","messageId":"138","endLine":9,"endColumn":34},{"ruleId":"135","severity":1,"message":"136","line":7,"column":30,"nodeType":"142","messageId":"138","endLine":7,"endColumn":35},{"ruleId":"135","severity":1,"message":"136","line":10,"column":34,"nodeType":"142","messageId":"138","endLine":13,"endColumn":18},{"ruleId":"148","severity":1,"message":"149","line":15,"column":50,"nodeType":"150","messageId":"151","endLine":15,"endColumn":55},{"ruleId":"135","severity":1,"message":"136","line":17,"column":15,"nodeType":"142","messageId":"138","endLine":17,"endColumn":51},{"ruleId":"135","severity":1,"message":"136","line":10,"column":33,"nodeType":"142","messageId":"138","endLine":10,"endColumn":54},{"ruleId":"135","severity":1,"message":"136","line":10,"column":22,"nodeType":"142","messageId":"138","endLine":10,"endColumn":56},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","Argument 'config' should be typed.","Identifier","missingArgType","ArrowFunctionExpression","@typescript-eslint/no-unused-vars","'grid' is assigned a value but never used.","unusedVar","'MoviesResult' is defined but never used.","'useRef' is defined but never used.","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull"]