[{"C:\\Front\\Movie-Search\\src\\index.tsx":"1","C:\\Front\\Movie-Search\\src\\serviceWorker.js":"2","C:\\Front\\Movie-Search\\src\\app\\App.tsx":"3","C:\\Front\\Movie-Search\\src\\app\\store.tsx":"4","C:\\Front\\Movie-Search\\src\\app\\Header.tsx":"5","C:\\Front\\Movie-Search\\src\\features\\movies\\moviesLoadCategory.tsx":"6","C:\\Front\\Movie-Search\\src\\features\\movies\\moviesLoadFavorite.tsx":"7","C:\\Front\\Movie-Search\\src\\features\\movies\\moviesLoadSearch.tsx":"8","C:\\Front\\Movie-Search\\src\\features\\movies\\moviesSlice.tsx":"9","C:\\Front\\Movie-Search\\src\\features\\filter\\filterSlice.tsx":"10","C:\\Front\\Movie-Search\\src\\features\\filter\\filerPage.tsx":"11","C:\\Front\\Movie-Search\\src\\app\\Navbar.tsx":"12","C:\\Front\\Movie-Search\\src\\features\\search\\moviesSearchPage.tsx":"13","C:\\Front\\Movie-Search\\src\\features\\movies\\moviesListPage.tsx":"14","C:\\Front\\Movie-Search\\src\\features\\filter\\filterGenres.tsx":"15","C:\\Front\\Movie-Search\\src\\features\\filter\\filterSorting.tsx":"16","C:\\Front\\Movie-Search\\src\\features\\movies\\moviesLoadFilter.tsx":"17","C:\\Front\\Movie-Search\\src\\hooks\\useFetch.tsx":"18","C:\\Front\\Movie-Search\\src\\api\\movieApi.tsx":"19","C:\\Front\\Movie-Search\\src\\features\\search\\moviesSearchInput.tsx":"20","C:\\Front\\Movie-Search\\src\\features\\search\\moviesSearchList.tsx":"21","C:\\Front\\Movie-Search\\src\\features\\movies\\moviesPagination.tsx":"22","C:\\Front\\Movie-Search\\src\\app\\Spinner.tsx":"23","C:\\Front\\Movie-Search\\src\\hooks\\usePrevious.tsx":"24","C:\\Front\\Movie-Search\\src\\features\\search\\moviesSearchItem.tsx":"25","C:\\Front\\Movie-Search\\src\\app\\image.tsx":"26","C:\\Front\\Movie-Search\\src\\features\\movies\\MovieDetails.tsx":"27","C:\\Front\\Movie-Search\\src\\features\\movies\\MoviesList.tsx":"28","C:\\Front\\Movie-Search\\src\\features\\movies\\moviesListItem.tsx":"29","C:\\Front\\Movie-Search\\src\\app\\Auth.tsx":"30","C:\\Front\\Movie-Search\\src\\app\\Modal.tsx":"31","C:\\Front\\Movie-Search\\src\\app\\Form.tsx":"32","C:\\Front\\Movie-Search\\src\\context\\authContext.tsx":"33"},{"size":1143,"mtime":1617118549638,"results":"34","hashOfConfig":"35"},{"size":5086,"mtime":1614783138488,"results":"36","hashOfConfig":"35"},{"size":1229,"mtime":1617115325752,"results":"37","hashOfConfig":"35"},{"size":375,"mtime":1614783138475,"results":"38","hashOfConfig":"35"},{"size":790,"mtime":1617003558812,"results":"39","hashOfConfig":"35"},{"size":806,"mtime":1614783138482,"results":"40","hashOfConfig":"35"},{"size":453,"mtime":1616944981463,"results":"41","hashOfConfig":"35"},{"size":716,"mtime":1614783138483,"results":"42","hashOfConfig":"35"},{"size":961,"mtime":1614783138484,"results":"43","hashOfConfig":"35"},{"size":1295,"mtime":1614783138477,"results":"44","hashOfConfig":"35"},{"size":570,"mtime":1614783138476,"results":"45","hashOfConfig":"35"},{"size":3598,"mtime":1614783138473,"results":"46","hashOfConfig":"35"},{"size":2768,"mtime":1614783138486,"results":"47","hashOfConfig":"35"},{"size":1314,"mtime":1616944927380,"results":"48","hashOfConfig":"35"},{"size":1448,"mtime":1614783138477,"results":"49","hashOfConfig":"35"},{"size":1559,"mtime":1614783138478,"results":"50","hashOfConfig":"35"},{"size":956,"mtime":1614783138482,"results":"51","hashOfConfig":"35"},{"size":1585,"mtime":1614783138487,"results":"52","hashOfConfig":"35"},{"size":4420,"mtime":1616944641832,"results":"53","hashOfConfig":"35"},{"size":1259,"mtime":1614783138484,"results":"54","hashOfConfig":"35"},{"size":572,"mtime":1614783138485,"results":"55","hashOfConfig":"35"},{"size":744,"mtime":1616944862797,"results":"56","hashOfConfig":"35"},{"size":389,"mtime":1614783138474,"results":"57","hashOfConfig":"35"},{"size":201,"mtime":1614783138487,"results":"58","hashOfConfig":"35"},{"size":1139,"mtime":1614783138485,"results":"59","hashOfConfig":"35"},{"size":641,"mtime":1614783138475,"results":"60","hashOfConfig":"35"},{"size":5451,"mtime":1616944766695,"results":"61","hashOfConfig":"35"},{"size":678,"mtime":1614783138479,"results":"62","hashOfConfig":"35"},{"size":2178,"mtime":1614783138481,"results":"63","hashOfConfig":"35"},{"size":1168,"mtime":1617119864231,"results":"64","hashOfConfig":"35"},{"size":469,"mtime":1617004882651,"results":"65","hashOfConfig":"35"},{"size":1309,"mtime":1617121152328,"results":"66","hashOfConfig":"35"},{"size":1349,"mtime":1617120354766,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"phhbyg",{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"78"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"78"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"78"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Front\\Movie-Search\\src\\index.tsx",[],"C:\\Front\\Movie-Search\\src\\serviceWorker.js",["156","157","158"],"// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n",[],"C:\\Front\\Movie-Search\\src\\app\\App.tsx",["159"],"C:\\Front\\Movie-Search\\src\\app\\store.tsx",[],[],"C:\\Front\\Movie-Search\\src\\app\\Header.tsx",["160"],"/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from '@emotion/react'\r\n\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { MoviesSearchPage } from '../features/search/moviesSearchPage'\r\nimport { Navbar } from './Navbar'\r\nimport Auth from './Auth'\r\nimport logo from './../style/react-logo.png'\r\nimport style from './header.module.css'\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <header className={style.header}>\r\n      <div className={style.container}>\r\n        <Link className={style.logo} to='/'>\r\n          <img src={logo} className={style.img} alt='logo' />\r\n          <h1 className={style.title}>Movies-Search</h1>\r\n        </Link>\r\n\r\n        <MoviesSearchPage />\r\n        <Navbar />\r\n        <Auth />\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n","C:\\Front\\Movie-Search\\src\\features\\movies\\moviesLoadCategory.tsx",["161"],"import React, { useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { fetchMovieType } from '../../api/movieApi'\r\nimport { useFetch } from '../../hooks/useFetch'\r\nimport { MoviesListPage } from './moviesListPage'\r\nimport { OnPageChangeCallback } from './moviesPagination'\r\n\r\nexport const moviesCategory = () => {\r\n  const location = useLocation()\r\n  const pathname = location.pathname as fetchMovieType\r\n  const [page, setPage] = useState(1)\r\n\r\n  const onPageChange: OnPageChangeCallback = (selectedItem) => {\r\n    const newPage = selectedItem.selected + 1\r\n    setPage(newPage)\r\n  }\r\n\r\n  const { status, data } = useFetch({ pathname, page })\r\n\r\n  return (\r\n    <MoviesListPage\r\n      status={status}\r\n      moviesData={data}\r\n      onPageChange={onPageChange}\r\n    />\r\n  )\r\n}\r\n","C:\\Front\\Movie-Search\\src\\features\\movies\\moviesLoadFavorite.tsx",["162"],"import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootState } from '../../app/store'\r\nimport { MoviesList } from './MoviesList'\r\nimport style from './moviesListPage.module.css'\r\n\r\nexport const moviesFavorite = () => {\r\n  const movies = useSelector((state: RootState) => state.movies.favorite)\r\n\r\n  return (\r\n    <div className={style.listMovies}>\r\n      <MoviesList movies={movies} favorite={movies} />\r\n    </div>\r\n  )\r\n}\r\n","C:\\Front\\Movie-Search\\src\\features\\movies\\moviesLoadSearch.tsx",["163"],"import React, { useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { useFetch } from '../../hooks/useFetch'\r\nimport { MoviesListPage } from './moviesListPage'\r\nimport { OnPageChangeCallback } from './moviesPagination'\r\n\r\nexport const moviesSearch = () => {\r\n  const { search } = useLocation()\r\n  const [page, setPage] = useState(1)\r\n\r\n  const onPageChange: OnPageChangeCallback = (selectedItem) => {\r\n    const newPage = selectedItem.selected + 1\r\n    setPage(newPage)\r\n  }\r\n\r\n  const { status, data } = useFetch({ pathname: '/search', page, search })\r\n\r\n  return (\r\n    <MoviesListPage\r\n      status={status}\r\n      moviesData={data}\r\n      onPageChange={onPageChange}\r\n    />\r\n  )\r\n}\r\n","C:\\Front\\Movie-Search\\src\\features\\movies\\moviesSlice.tsx",[],"C:\\Front\\Movie-Search\\src\\features\\filter\\filterSlice.tsx",[],"C:\\Front\\Movie-Search\\src\\features\\filter\\filerPage.tsx",["164"],"import React from 'react'\r\nimport { FilterGenres } from './filterGenres'\r\nimport { FilterSorting } from './filterSorting'\r\nimport {LoadFilterMovies} from '../movies/moviesLoadFilter'\r\nimport style from './filerPage.module.css'\r\n\r\nexport const FilterPage = () => {\r\n  return (\r\n    <div className={style.filter}>\r\n      <div className={style.sort}>\r\n        <FilterSorting />\r\n      </div>\r\n      <div className={style.genres}>\r\n        <FilterGenres />\r\n      </div>\r\n      <div className={style.movies}>\r\n        <LoadFilterMovies />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Front\\Movie-Search\\src\\app\\Navbar.tsx",["165"],"import React, { useEffect, useRef } from 'react'\r\nimport { NavLink, useLocation } from 'react-router-dom'\r\nimport github from './../style/github.svg'\r\nimport style from './navbar.module.css'\r\n\r\nexport const Navbar = () => {\r\n  \r\n  const wrapperRef = useRef<HTMLElement | null>(null)\r\n  const location = useLocation()\r\n  const [isHidden, setHidden] = React.useState<boolean>(true)\r\n\r\n  useEffect(() => {\r\n    function handleClickOutside(e: MouseEvent): void {\r\n      if (\r\n        wrapperRef.current &&\r\n        !wrapperRef.current.contains(e.target as Node)\r\n      ) {\r\n        document.body.classList.remove('overlay')\r\n        setHidden(true)\r\n      }\r\n    }\r\n\r\n    document.addEventListener('mousedown', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setHidden(true)\r\n    document.body.classList.remove('overlay')\r\n  }, [location.key])\r\n\r\n  const handleClickBtn = () => {\r\n    if (isHidden) {\r\n      setHidden(false)\r\n      document.body.classList.toggle('overlay')\r\n    } else {\r\n      setHidden(true)\r\n      document.body.classList.toggle('overlay')\r\n    }\r\n  }\r\n  return (\r\n    <nav className={style.nav} ref={wrapperRef}>\r\n      <div className={style.container}>\r\n        <div\r\n          className={\r\n            isHidden\r\n              ? `${style.toggle}`\r\n              : `${style.toggle} ${style.toggleHidden}`\r\n          }\r\n        >\r\n          <button\r\n            className={style.btn}\r\n            onClick={() => handleClickBtn()}\r\n          ></button>\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n        </div>\r\n        <ul\r\n          className={\r\n            isHidden ? `${style.items}` : `${style.items} ${style.itemsHidden}`\r\n          }\r\n        >\r\n          <li className={style.item}>\r\n            <NavLink\r\n              className={style.link}\r\n              exact\r\n              activeClassName={style.selected}\r\n              to='/'\r\n            >\r\n              Popular\r\n            </NavLink>\r\n          </li>\r\n          <li className={style.item}>\r\n            <NavLink\r\n              className={style.link}\r\n              activeClassName={style.selected}\r\n              to='/upcoming'\r\n            >\r\n              Up comning\r\n            </NavLink>\r\n          </li>\r\n          <li className={style.item}>\r\n            <NavLink\r\n              className={style.link}\r\n              activeClassName={style.selected}\r\n              to='/top_rated'\r\n            >\r\n              Top rated\r\n            </NavLink>\r\n          </li>\r\n          <li className={style.item}>\r\n            <NavLink\r\n              className={style.link}\r\n              activeClassName={style.selected}\r\n              to='/favorite'\r\n            >\r\n              Favorite\r\n            </NavLink>\r\n          </li>\r\n          <li className={style.item}>\r\n            <NavLink\r\n              className={style.link}\r\n              activeClassName={style.selected}\r\n              to='/filter'\r\n            >\r\n              Filter\r\n            </NavLink>\r\n          </li>\r\n          <li className={style.item}>\r\n            <a\r\n              className={style.link}\r\n              href='https://github.com/ethnicolr/Movie-Search'\r\n              target='_blank'\r\n              rel='noopener noreferrer'\r\n            >\r\n              <img\r\n                src={github}\r\n                alt='github'\r\n                className={style.icon}\r\n                width='40'\r\n              />\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n","C:\\Front\\Movie-Search\\src\\features\\search\\moviesSearchPage.tsx",["166"],"import React, { useState, useEffect, useCallback } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { debounce } from 'lodash'\r\nimport { getMovies,MovieType } from '../../api/movieApi'\r\nimport { MoviesSearchInput } from './moviesSearchInput'\r\nimport { MoviesSearchList } from './moviesSearchList'\r\nimport style from './moviesSearchPage.module.css'\r\n\r\ntype searchStatus = 'indle' | 'pendiing' | 'succeeded' | 'failed'\r\n\r\nexport const MoviesSearchPage = () => {\r\n  const [isHidden, setHidden] = useState(false)\r\n  const [list, setList] = useState<MovieType[]>([])\r\n  const [searchStatus, setStatus] = useState<searchStatus>('indle') \r\n  const [error, setError] = useState(null)\r\n  const history = useHistory()\r\n  const location = useLocation()\r\n\r\n  const wrapperRef = React.useRef<HTMLDivElement | null>(null)\r\n\r\n  const delay = useCallback(\r\n    debounce((value: string) => {\r\n      \r\n    \r\n      setStatus(\"pendiing\")\r\n      const fetchS = async () => {\r\n        try {\r\n          const data = await getMovies({pathname: '/search', search: value})\r\n          const list = data.moviesList.slice(0, 5)\r\n          setList(list)\r\n          setStatus('succeeded')\r\n        } catch (err){\r\n          setStatus('failed')\r\n          console.log(\"fail\");\r\n          setError(err)\r\n        }\r\n      }\r\n      if (value.length) {\r\n        fetchS()\r\n      } else {\r\n        setList([])\r\n      }\r\n    }, 500),\r\n    []\r\n  )\r\n\r\n  useEffect(() => {\r\n    setHidden(true)\r\n  }, [location.key])\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (e: MouseEvent): void => {\r\n      if (\r\n        wrapperRef.current &&\r\n        !wrapperRef.current.contains(e.target as Node)\r\n      ) {\r\n        setHidden(true)\r\n      } else {\r\n        setHidden(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener('mousedown', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside)\r\n    }\r\n  },[])\r\n\r\n  const onSearchSubmit = (value: string): void => {\r\n    history.push({\r\n      pathname: '/search',\r\n      search: value\r\n    })\r\n  }\r\n\r\n  let previewList\r\n\r\n  if (list.length === 0 && searchStatus === 'succeeded') {\r\n    previewList = <h2>Not found</h2>\r\n  } else if (error) {\r\n    <h2>{error}</h2>\r\n  } else {\r\n    previewList = <MoviesSearchList movies={list} />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={style.search} ref={wrapperRef}>\r\n        <MoviesSearchInput\r\n          onSearchChange={delay}\r\n          onSearchSubmit={onSearchSubmit}\r\n        />\r\n        <div\r\n          className={\r\n            isHidden\r\n              ? `${style.container} ${style.hidden}`\r\n              : `${style.container}`\r\n          }\r\n        >\r\n          {previewList}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","C:\\Front\\Movie-Search\\src\\features\\movies\\moviesListPage.tsx",["167"],"import React from 'react'\r\nimport { Status, MoviesResult } from '../../api/movieApi'\r\nimport { Pagination, OnPageChangeCallback } from './moviesPagination'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootState } from '../../app/store'\r\nimport { MoviesList } from './MoviesList'\r\nimport { Spinner } from './../../app/Spinner'\r\nimport style from './moviesListPage.module.css'\r\n\r\ninterface Props {\r\n  status: Status\r\n  moviesData: MoviesResult | null\r\n  onPageChange: OnPageChangeCallback\r\n}\r\n\r\nexport const MoviesListPage = ({ status, moviesData, onPageChange }: Props) => {\r\n  const favorite = useSelector((state: RootState) => state.movies.favorite)\r\n\r\n  if (moviesData == null || status == 'fetching') {\r\n    return (\r\n      <div className={style.listMovies}>\r\n        <Spinner />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (status == 'fetched' && moviesData.moviesList.length == 0) {\r\n    return (\r\n      <div className={style.listMovies}>\r\n        <h2>Not fount</h2>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const { moviesList, totalPages, page } = moviesData\r\n  return (\r\n    <div className={style.listMovies}>\r\n      <MoviesList movies={moviesList} favorite={favorite} />\r\n      <Pagination\r\n        pageCount={totalPages}\r\n        currentPage={page}\r\n        onPageChange={onPageChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","C:\\Front\\Movie-Search\\src\\features\\filter\\filterGenres.tsx",["168"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { changeGenres } from './filterSlice'\r\nimport { RootState } from '../../app/store'\r\nimport { fetchGenres } from './filterSlice'\r\n\r\nimport style from './filterGenres.module.css'\r\n\r\nexport const FilterGenres = () => {\r\n  const dispatch = useDispatch()\r\n  const genres = useSelector((state: RootState) => state.filter.genres)\r\n  \r\n  useEffect(() => {\r\n    if (genres.length === 0) {\r\n      dispatch(fetchGenres())\r\n    }\r\n  }, [])\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    dispatch(changeGenres(e.currentTarget.name))\r\n  }\r\n\r\n  return (\r\n    <div className={style.genres}>\r\n      <h3 className={style.title}>Genres</h3>\r\n      <ul className={style.list}>\r\n        {genres.length\r\n          ? genres.map((genre) => {\r\n              return (\r\n                <li className={style.item} key={genre.id}>\r\n                  <label className={style.label}>\r\n                    {genre.name}\r\n                    <input\r\n                      type='checkbox'\r\n                      onChange={handleChange}\r\n                      checked={genre.selected}\r\n                      name={genre.id}\r\n                    />\r\n                    <span className={style.checkmark} />\r\n                  </label>\r\n                </li>\r\n              )\r\n            })\r\n          : null}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Front\\Movie-Search\\src\\features\\filter\\filterSorting.tsx",["169"],"import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { sortBy } from './filterSlice'\r\nimport { RootState } from './../../app/store'\r\nimport style from './filterSorting.module.css'\r\n\r\nexport const FilterSorting = () => {\r\n  const dispatch = useDispatch()\r\n  const active = useSelector((state: RootState) => state.filter.sortBy)\r\n\r\n  const handleSort = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    dispatch(sortBy(e.currentTarget.name))\r\n  }\r\n\r\n  const sortActivity = (field: string) => {\r\n    return active === `${field}.desc`\r\n      ? `${style.sortBtn} ${style.desc}`\r\n      : `${style.sortBtn} ${style.asc}`\r\n  }\r\n\r\n  return (\r\n    <div className={style.sort}>\r\n      <h3 className={style.title}>Sort by</h3>\r\n      <ul className={style.items}>\r\n        <li className={style.item}>\r\n          <button\r\n            className={sortActivity('popularity')}\r\n            name='popularity'\r\n            onClick={handleSort}\r\n          >\r\n            popularity\r\n          </button>\r\n        </li>\r\n        <li className={style.item}>\r\n          <button\r\n            className={sortActivity('release_date')}\r\n            name='release_date'\r\n            onClick={handleSort}\r\n          >\r\n            date\r\n          </button>\r\n        </li>\r\n        <li className={style.item}>\r\n          <button\r\n            className={sortActivity('vote_average')}\r\n            name='vote_average'\r\n            onClick={handleSort}\r\n          >\r\n            rating\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Front\\Movie-Search\\src\\features\\movies\\moviesLoadFilter.tsx",["170"],"import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootState } from '../../app/store'\r\nimport { useFetch } from '../../hooks/useFetch'\r\nimport { MoviesListPage } from './moviesListPage'\r\nimport { OnPageChangeCallback } from './moviesPagination'\r\n\r\nexport const LoadFilterMovies = () => {\r\n  const [page, setPage] = useState(1)\r\n  const { genres, sortBy } = useSelector((state: RootState) => state.filter)\r\n\r\n  const selectedGenres = genres\r\n    .filter((genre) => genre.selected)\r\n    .map((genre) => genre.id)\r\n\r\n  const onPageChange: OnPageChangeCallback = (selectedItem) => {\r\n    const newPage = selectedItem.selected + 1\r\n    setPage(newPage)\r\n  }\r\n\r\n  const { status, data } = useFetch({\r\n    pathname: '/filter',\r\n    sortBy,\r\n    genres: selectedGenres,\r\n    page,\r\n  })\r\n\r\n  return (\r\n    <MoviesListPage\r\n      status={status}\r\n      moviesData={data}\r\n      onPageChange={onPageChange}\r\n    />\r\n  )\r\n}\r\n","C:\\Front\\Movie-Search\\src\\hooks\\useFetch.tsx",[],"C:\\Front\\Movie-Search\\src\\api\\movieApi.tsx",[],"C:\\Front\\Movie-Search\\src\\features\\search\\moviesSearchInput.tsx",["171","172"],"import React, { useState } from 'react'\r\n\r\nimport seach from './../../style/search.svg'\r\nimport style from './moviesSearchInput.module.css'\r\ninterface InputProps {\r\n  onSearchChange(value: string): void\r\n  onSearchSubmit(value: string): void\r\n}\r\n\r\nexport const MoviesSearchInput = ({\r\n  onSearchChange,\r\n  onSearchSubmit,\r\n}: InputProps) => {\r\n  const [value, setValue] = useState('')\r\n  const inputEl = React.useRef<HTMLInputElement>(null!)\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    const value = e.currentTarget.value\r\n    setValue(value)\r\n    onSearchChange(value)\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault()\r\n    if (value.length) {\r\n      onSearchSubmit(value)\r\n      inputEl.current.blur()\r\n      document.body.style.overflow = 'auto'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          ref={inputEl}\r\n          className={style.input}\r\n          type='text'\r\n          value={value}\r\n          onChange={handleChange}\r\n          placeholder='Seacrh movie...'\r\n        />\r\n        <button className={style.btn}>\r\n          <img src={seach} alt='seach' />\r\n        </button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n","C:\\Front\\Movie-Search\\src\\features\\search\\moviesSearchList.tsx",[],"C:\\Front\\Movie-Search\\src\\features\\movies\\moviesPagination.tsx",["173"],"import React from 'react'\r\nimport Paginate, { ReactPaginateProps } from 'react-paginate'\r\nimport style from './moviesPagination.module.css'\r\n\r\nexport type OnPageChangeCallback = ReactPaginateProps['onPageChange']\r\n\r\ninterface Props {\r\n  currentPage: number\r\n  pageCount: number\r\n  onPageChange?: OnPageChangeCallback\r\n}\r\n\r\nexport const Pagination = ({ currentPage, onPageChange, pageCount }: Props) => {\r\n  return (\r\n    <Paginate\r\n      forcePage={currentPage}\r\n      pageCount={pageCount}\r\n      marginPagesDisplayed={2}\r\n      pageRangeDisplayed={5}\r\n      onPageChange={onPageChange}\r\n      nextLabel='&rarr;'\r\n      previousLabel='&larr;'\r\n      containerClassName={style.pagination}\r\n      activeClassName={style.active}\r\n    />\r\n  )\r\n}\r\n","C:\\Front\\Movie-Search\\src\\app\\Spinner.tsx",["174"],"import React from 'react'\r\nimport style from './spiner.module.css'\r\n\r\nexport const Spinner = () => {\r\n  return (\r\n    <div className={style.container}>\r\n      <div className={style.threeDots}>\r\n        <span className={style.dot}></span>\r\n        <span className={style.dot}></span>\r\n        <span className={style.dot}></span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Spinner\r\n","C:\\Front\\Movie-Search\\src\\hooks\\usePrevious.tsx",[],"C:\\Front\\Movie-Search\\src\\features\\search\\moviesSearchItem.tsx",["175"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { MovieType } from '../../api/movieApi'\r\nimport {Image} from '../../app/image'\r\nimport star from './../../style/star.svg'\r\nimport style from './moviesSearchItem.module.css'\r\n\r\ntype Props = { movie: MovieType }\r\n\r\nexport const MoviesSearchItem = ({ movie }: Props) => {\r\n  const {\r\n    title,\r\n    name,\r\n    release_date,\r\n    first_air_date,\r\n    poster_path,\r\n    id,\r\n    vote_average,\r\n    media_type,\r\n  } = movie\r\n  const link = media_type ? media_type : 'movie'\r\n  return (\r\n    <Link to={`/${link}/${id}`} className={style.item}>\r\n      <Image\r\n        src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\r\n        size={'40px'}\r\n      />\r\n      <h2 className={style.title}>\r\n        {`${title || name} ${\r\n          release_date || first_air_date\r\n            ? `(${(release_date || first_air_date).split(/-/)[0]})`\r\n            : null\r\n        }`}\r\n      </h2>\r\n      <span className={style.vote}>\r\n        {vote_average ? vote_average.toFixed(1) : 0}\r\n        <img className={style.thumb} src={star} alt='vote' />\r\n      </span>\r\n    </Link>\r\n  )\r\n}\r\n",[],"C:\\Front\\Movie-Search\\src\\app\\image.tsx",["176"],"import React, { useState, useEffect } from 'react'\r\nimport error from './../style/error.png'\r\n\r\ninterface Props {\r\n  src: string\r\n  size?: string\r\n}\r\n\r\nexport const Image = ({ src, size = '100%' }: Props) => {\r\n  const [fallback, setFallback] = useState(src)\r\n  const [errored, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setFallback(src)\r\n  }, [src])\r\n\r\n  const handleError = () => {\r\n    if (!errored) {\r\n      setError(true)\r\n      setFallback(error)\r\n    }\r\n  }\r\n\r\n  const style = {\r\n    width: size,\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <img src={fallback} onError={handleError} alt='poster' style={style} />\r\n    </>\r\n  )\r\n}\r\n","C:\\Front\\Movie-Search\\src\\features\\movies\\MovieDetails.tsx",["177"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport { addFavorite, deleteFavorite } from './moviesSlice'\r\nimport { DetailsResult, gethDetails, MovieType } from '../../api/movieApi'\r\nimport { useFetch } from './../../hooks/useFetch'\r\nimport { RootState } from '../../app/store'\r\nimport { MoviesList } from './MoviesList'\r\nimport { Image } from '../../app/image'\r\n\r\nimport remove from './../../style/minus.svg'\r\nimport vote from './../../style/star.svg'\r\nimport add from './../../style/correct.svg'\r\nimport style from './movieDetails.module.css'\r\n\r\ninterface PropsParams {\r\n  movieId: string\r\n  media_type: string\r\n}\r\n\r\nexport const MovieDetails = () => {\r\n  const [data, setData] = React.useState<DetailsResult | null>(null)\r\n  const [error, setError] = React.useState(null)\r\n  const { movieId, media_type } = useParams<PropsParams>()\r\n  const dispatch = useDispatch()\r\n\r\n  const { data: similarMovie } = useFetch({ pathname: '/similar', movieId })\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await gethDetails(movieId)\r\n        setData(data)\r\n        setError(null)\r\n      } catch (err) {\r\n        setError(err)\r\n      }\r\n    }\r\n    fetchData()\r\n  }, [media_type, movieId])\r\n\r\n  const favorite = useSelector((state: RootState) => state.movies.favorite)\r\n  const isFav = favorite.some((favorite: MovieType) => {\r\n    return favorite.id == movieId\r\n  })\r\n\r\n  if (error) {\r\n    return <h2 className='movie-details__title'>{error}</h2>\r\n  }\r\n\r\n  if (!data) {\r\n    return null\r\n  }\r\n\r\n  const {\r\n    title,\r\n    vote_average,\r\n    poster_path,\r\n    overview,\r\n    tagline,\r\n    release_date,\r\n    first_air_date,\r\n    genres = [],\r\n    runtime,\r\n    episode_run_time,\r\n    name,\r\n    id,\r\n    production_countries = [],\r\n    budget = 0,\r\n  } = data.movieDetails\r\n\r\n  const handleFavorite = () => {\r\n    if (isFav) {\r\n      dispatch(deleteFavorite(data.movieDetails.id))\r\n    } else {\r\n      dispatch(\r\n        addFavorite({\r\n          id,\r\n          title,\r\n          vote_average,\r\n          poster_path,\r\n          release_date,\r\n          name,\r\n          first_air_date,\r\n          media_type,\r\n        })\r\n      )\r\n    }\r\n  }\r\n\r\n  const genresList = genres.length\r\n    ? genres.map((movie) => ` ${movie.name.toLowerCase()}`).join()\r\n    : null\r\n  const countries = production_countries.length\r\n    ? production_countries.map((e) => ` ${e.name}`).join()\r\n    : null\r\n  const castList = data.cast\r\n    ? data.cast\r\n        .slice(0, 10)\r\n        .map((item) => ` ${item.name}`)\r\n        .join()\r\n    : null\r\n  const formatBudget = `$ ${budget\r\n    .toString()\r\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.')}`\r\n\r\n  return (\r\n    <div className={style.movieDetails}>\r\n      <div className={style.container}>\r\n        <div className={style.leftColumn}>\r\n          <Image src={`https://image.tmdb.org/t/p/w500/${poster_path}`} />\r\n        </div>\r\n        <div className={style.rightColumn}>\r\n          <div className={style.heading}>\r\n            <h2 className={style.title}> {title || name} </h2>\r\n            <span className={style.vote}>\r\n              {`${vote_average} `}\r\n              <img className={style.thumb} src={vote} alt='vote' />\r\n            </span>\r\n          </div>\r\n\r\n          {release_date || first_air_date ? (\r\n            <div className={style.info}>\r\n              <h3 className={style.tagline}>Year</h3>\r\n              <p className={style.text}>\r\n                {(release_date || first_air_date).split('-')[0]}\r\n              </p>\r\n            </div>\r\n          ) : null}\r\n\r\n          {countries ? (\r\n            <div className={style.info}>\r\n              <h3 className={style.tagline}>Country</h3>\r\n              <p className={style.text}>{countries}</p>\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className={style.info}>\r\n            <h3 className={style.tagline}>Genres</h3>\r\n            <p className={style.text}>{genresList}</p>\r\n          </div>\r\n\r\n          {tagline ? (\r\n            <div className={style.info}>\r\n              <h3 className={style.tagline}>Tag</h3>\r\n              <p className={style.text}>{tagline}</p>\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className={style.info}>\r\n            <h3 className={style.tagline}>Cast</h3>\r\n            <p className={style.text}>{castList}</p>\r\n          </div>\r\n\r\n          <div className={style.info}>\r\n            <h3 className={style.tagline}>Runtime</h3>\r\n            <p className={style.text}>\r\n              {episode_run_time || runtime} {' min'}\r\n            </p>\r\n          </div>\r\n\r\n          <div className={style.info}>\r\n            <h3 className={style.tagline}>Budget</h3>\r\n            <p className={style.text}>{formatBudget}</p>\r\n          </div>\r\n\r\n          <h2 className={style.subtitle}>Overview</h2>\r\n          <p className={style.overview}> {overview} </p>\r\n\r\n          <button className={style.btn} onClick={handleFavorite}>\r\n            <img src={isFav ? add : remove} alt='favorite' />\r\n            {isFav ? 'Delete from Favorite' : 'Add to Favorite'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className={style.recommend}>\r\n        <h2 className={style.headline}>Recommendations</h2>\r\n        {similarMovie ? (\r\n          <MoviesList movies={similarMovie.moviesList} favorite={favorite} />\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Front\\Movie-Search\\src\\features\\movies\\MoviesList.tsx",["178","179","180"],"import React, {useState, useEffect} from 'react'\r\n\r\nimport { MovieType } from '../../api/movieApi'\r\nimport {Movie} from './moviesListItem'\r\nimport style from './moviesList.module.css'\r\n\r\ninterface MoviesProp {\r\n  movies: MovieType[]\r\n  favorite: MovieType[]\r\n}\r\n\r\nexport const MoviesList = ({ movies, favorite }: MoviesProp) => {\r\n  return (\r\n    <ul className={style.moviesList}>\r\n      {movies.map((movie) => {\r\n        const isFav = favorite.some((favorite) => favorite.id === movie.id)\r\n        return (\r\n          <li className={style.item} key={movie.id}>\r\n            <Movie movieData={movie} isFav={isFav} />\r\n          </li>\r\n        )\r\n      })}\r\n    </ul>\r\n  )\r\n}\r\n\r\n","C:\\Front\\Movie-Search\\src\\features\\movies\\moviesListItem.tsx",[],"C:\\Front\\Movie-Search\\src\\app\\Auth.tsx",["181","182"],"C:\\Front\\Movie-Search\\src\\app\\Modal.tsx",[],"C:\\Front\\Movie-Search\\src\\app\\Form.tsx",["183"],"C:\\Front\\Movie-Search\\src\\context\\authContext.tsx",["184"],{"ruleId":"185","severity":1,"message":"186","line":23,"column":8,"nodeType":"187","messageId":"188","endLine":23,"endColumn":33},{"ruleId":"185","severity":1,"message":"189","line":23,"column":26,"nodeType":"190","messageId":"191","endLine":23,"endColumn":32},{"ruleId":"185","severity":1,"message":"186","line":129,"column":8,"nodeType":"187","messageId":"188","endLine":129,"endColumn":29},{"ruleId":"185","severity":1,"message":"186","line":11,"column":1,"nodeType":"187","messageId":"188","endLine":11,"endColumn":15},{"ruleId":"185","severity":1,"message":"186","line":13,"column":23,"nodeType":"192","messageId":"188","endLine":13,"endColumn":28},{"ruleId":"185","severity":1,"message":"186","line":8,"column":31,"nodeType":"192","messageId":"188","endLine":8,"endColumn":36},{"ruleId":"185","severity":1,"message":"186","line":7,"column":31,"nodeType":"192","messageId":"188","endLine":7,"endColumn":36},{"ruleId":"185","severity":1,"message":"186","line":7,"column":29,"nodeType":"192","messageId":"188","endLine":7,"endColumn":34},{"ruleId":"185","severity":1,"message":"186","line":7,"column":27,"nodeType":"192","messageId":"188","endLine":7,"endColumn":32},{"ruleId":"185","severity":1,"message":"186","line":6,"column":23,"nodeType":"192","messageId":"188","endLine":6,"endColumn":28},{"ruleId":"185","severity":1,"message":"186","line":11,"column":33,"nodeType":"192","messageId":"188","endLine":11,"endColumn":38},{"ruleId":"185","severity":1,"message":"186","line":16,"column":31,"nodeType":"192","messageId":"188","endLine":16,"endColumn":79},{"ruleId":"185","severity":1,"message":"186","line":9,"column":29,"nodeType":"192","messageId":"188","endLine":9,"endColumn":34},{"ruleId":"185","severity":1,"message":"186","line":7,"column":30,"nodeType":"192","messageId":"188","endLine":7,"endColumn":35},{"ruleId":"185","severity":1,"message":"186","line":8,"column":33,"nodeType":"192","messageId":"188","endLine":8,"endColumn":38},{"ruleId":"185","severity":1,"message":"186","line":10,"column":34,"nodeType":"192","messageId":"188","endLine":13,"endColumn":18},{"ruleId":"193","severity":1,"message":"194","line":15,"column":50,"nodeType":"195","messageId":"196","endLine":15,"endColumn":55},{"ruleId":"185","severity":1,"message":"186","line":13,"column":27,"nodeType":"192","messageId":"188","endLine":13,"endColumn":79},{"ruleId":"185","severity":1,"message":"186","line":4,"column":24,"nodeType":"192","messageId":"188","endLine":4,"endColumn":29},{"ruleId":"185","severity":1,"message":"186","line":10,"column":33,"nodeType":"192","messageId":"188","endLine":10,"endColumn":54},{"ruleId":"185","severity":1,"message":"186","line":9,"column":22,"nodeType":"192","messageId":"188","endLine":9,"endColumn":56},{"ruleId":"185","severity":1,"message":"186","line":21,"column":29,"nodeType":"192","messageId":"188","endLine":21,"endColumn":34},{"ruleId":"197","severity":1,"message":"198","line":1,"column":16,"nodeType":"190","messageId":"199","endLine":1,"endColumn":24},{"ruleId":"197","severity":1,"message":"200","line":1,"column":26,"nodeType":"190","messageId":"199","endLine":1,"endColumn":35},{"ruleId":"185","severity":1,"message":"186","line":12,"column":27,"nodeType":"192","messageId":"188","endLine":12,"endColumn":64},{"ruleId":"197","severity":1,"message":"198","line":4,"column":17,"nodeType":"190","messageId":"199","endLine":4,"endColumn":25},{"ruleId":"185","severity":1,"message":"186","line":8,"column":16,"nodeType":"187","messageId":"188","endLine":8,"endColumn":31},{"ruleId":"201","severity":2,"message":"202","line":9,"column":13,"nodeType":"190","messageId":"203","endLine":9,"endColumn":21},{"ruleId":"185","severity":1,"message":"186","line":28,"column":8,"nodeType":"187","messageId":"188","endLine":32,"endColumn":3},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","Argument 'config' should be typed.","Identifier","missingArgType","ArrowFunctionExpression","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","@typescript-eslint/no-unused-vars","'useState' is defined but never used.","unusedVar","'useEffect' is defined but never used.","@typescript-eslint/ban-types","Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","bannedTypeMessage"]