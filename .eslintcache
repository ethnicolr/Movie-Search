[{"D:\\git\\my-app\\src\\index.tsx":"1","D:\\git\\my-app\\src\\serviceWorker.js":"2","D:\\git\\my-app\\src\\app\\App.tsx":"3","D:\\git\\my-app\\src\\app\\store.tsx":"4","D:\\git\\my-app\\src\\app\\Header.tsx":"5","D:\\git\\my-app\\src\\features\\movies\\movieDetails.tsx":"6","D:\\git\\my-app\\src\\features\\movies\\moviesSlice.tsx":"7","D:\\git\\my-app\\src\\features\\filter\\filerPage.tsx":"8","D:\\git\\my-app\\src\\features\\filter\\filterSlice.tsx":"9","D:\\git\\my-app\\src\\features\\search\\moviesSearchPage.tsx":"10","D:\\git\\my-app\\src\\app\\Navbar.tsx":"11","D:\\git\\my-app\\src\\features\\movies\\moviesList.tsx":"12","D:\\git\\my-app\\src\\app\\Spinner.tsx":"13","D:\\git\\my-app\\src\\features\\filter\\filterGenres.tsx":"14","D:\\git\\my-app\\src\\features\\filter\\filterSorting.tsx":"15","D:\\git\\my-app\\src\\api\\movieApi.tsx":"16","D:\\git\\my-app\\src\\features\\search\\moviesSearchInput.tsx":"17","D:\\git\\my-app\\src\\features\\search\\moviesSearchList.tsx":"18","D:\\git\\my-app\\src\\features\\movies\\moviesListItem.tsx":"19","D:\\git\\my-app\\src\\features\\search\\moviesSearchItem.tsx":"20","D:\\git\\my-app\\src\\app\\image.tsx":"21","D:\\git\\my-app\\src\\hooks\\useFetch.tsx":"22","D:\\git\\my-app\\src\\hooks\\usePrevious.tsx":"23","D:\\git\\my-app\\src\\app\\pagination.tsx":"24","D:\\git\\my-app\\src\\app\\moviesList.tsx":"25","D:\\git\\my-app\\src\\features\\movies\\moviesListPage.tsx":"26","D:\\git\\my-app\\src\\features\\movies\\moviesLoadCategory.tsx":"27","D:\\git\\my-app\\src\\features\\movies\\moviesLoadSearch.tsx":"28","D:\\git\\my-app\\src\\features\\movies\\moviesLoadFilter.tsx":"29","D:\\git\\my-app\\src\\features\\movies\\moviesLoadFavorite.tsx":"30"},{"size":674,"mtime":1606913633530,"results":"31","hashOfConfig":"32"},{"size":4951,"mtime":499162500000,"results":"33","hashOfConfig":"32"},{"size":1055,"mtime":1607017487716,"results":"34","hashOfConfig":"32"},{"size":375,"mtime":1607016661171,"results":"35","hashOfConfig":"32"},{"size":658,"mtime":1606914050930,"results":"36","hashOfConfig":"32"},{"size":5431,"mtime":1607016014525,"results":"37","hashOfConfig":"32"},{"size":961,"mtime":1607016759021,"results":"38","hashOfConfig":"32"},{"size":570,"mtime":1607016574336,"results":"39","hashOfConfig":"32"},{"size":1295,"mtime":1606831631501,"results":"40","hashOfConfig":"32"},{"size":2954,"mtime":1607016633681,"results":"41","hashOfConfig":"32"},{"size":3598,"mtime":1606894090973,"results":"42","hashOfConfig":"32"},{"size":678,"mtime":1607003898176,"results":"43","hashOfConfig":"32"},{"size":389,"mtime":1606734918686,"results":"44","hashOfConfig":"32"},{"size":1448,"mtime":1606914354611,"results":"45","hashOfConfig":"32"},{"size":1559,"mtime":1606834502703,"results":"46","hashOfConfig":"32"},{"size":4428,"mtime":1607015864658,"results":"47","hashOfConfig":"32"},{"size":1259,"mtime":1606730899596,"results":"48","hashOfConfig":"32"},{"size":572,"mtime":1606670838647,"results":"49","hashOfConfig":"32"},{"size":2178,"mtime":1606893749680,"results":"50","hashOfConfig":"32"},{"size":1139,"mtime":1606671350186,"results":"51","hashOfConfig":"32"},{"size":641,"mtime":1606914063502,"results":"52","hashOfConfig":"32"},{"size":1760,"mtime":1607015803974,"results":"53","hashOfConfig":"32"},{"size":353,"mtime":1606993717275,"results":"54","hashOfConfig":"32"},{"size":770,"mtime":1606994761910,"results":"55","hashOfConfig":"32"},{"size":695,"mtime":1606992644197,"results":"56","hashOfConfig":"32"},{"size":1316,"mtime":1607014780398,"results":"57","hashOfConfig":"32"},{"size":808,"mtime":1607014289327,"results":"58","hashOfConfig":"32"},{"size":718,"mtime":1607017447470,"results":"59","hashOfConfig":"32"},{"size":958,"mtime":1607016561872,"results":"60","hashOfConfig":"32"},{"size":460,"mtime":1607017403054,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"2u5vyz",{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"64"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"64"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"64"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"64"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"64"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"64"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"64"},"D:\\git\\my-app\\src\\index.tsx",[],[],"D:\\git\\my-app\\src\\serviceWorker.js",["146","147","148"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",[],"D:\\git\\my-app\\src\\app\\App.tsx",["149"],"D:\\git\\my-app\\src\\app\\store.tsx",[],"D:\\git\\my-app\\src\\app\\Header.tsx",["150"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { MoviesSearchPage } from '../features/search/moviesSearchPage'\r\nimport { Navbar } from './Navbar'\r\nimport logo from './../style/react-logo.png'\r\nimport style from './header.module.css'\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <header className={style.header}>\r\n      <div className={style.container}>\r\n        <Link className={style.logo} to='/'>\r\n          <img src={logo} className={style.img} alt='logo' />\r\n          <h1 className={style.title}>Movies-Search</h1>\r\n        </Link>\r\n        <MoviesSearchPage />\r\n        <Navbar />\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\movies\\movieDetails.tsx",["151"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport { addFavorite, deleteFavorite } from './moviesSlice'\r\nimport { DetailsResult, gethDetails, MovieType } from '../../api/movieApi'\r\nimport { useFetch } from './../../hooks/useFetch'\r\nimport { RootState } from '../../app/store'\r\nimport { MoviesList } from './moviesList'\r\nimport { Image } from '../../app/image'\r\n\r\nimport remove from './../../style/minus.svg'\r\nimport vote from './../../style/star.svg'\r\nimport add from './../../style/correct.svg'\r\nimport style from './movieDetails.module.css'\r\n\r\ninterface PropsParams {\r\n  movieId: string\r\n  media_type: string\r\n}\r\n\r\nexport const MovieDetails = () => {\r\n  const [data, setData] = React.useState<DetailsResult | null>(null)\r\n  const [error, setError] = React.useState(null)\r\n  const { movieId, media_type } = useParams<PropsParams>()\r\n  const dispatch = useDispatch()\r\n\r\n  const { data: similarMovie } = useFetch({ pathname: '/similar', movieId })\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await gethDetails(movieId)\r\n        setData(data)\r\n        setError(null)\r\n      } catch (err) {\r\n        setError(err)\r\n      }\r\n    }\r\n    fetchData()\r\n  }, [media_type, movieId])\r\n\r\n  const favorite = useSelector((state: RootState) => state.movies.favorite)\r\n  const isFav = favorite.some((favorite: MovieType) => {\r\n    return favorite.id == movieId\r\n  })\r\n\r\n  if (error) {\r\n    return <h2 className='movie-details__title'>{error}</h2>\r\n  }\r\n\r\n  if (!data) {\r\n    return null\r\n  }\r\n\r\n  const {\r\n    title,\r\n    vote_average,\r\n    poster_path,\r\n    overview,\r\n    tagline,\r\n    release_date,\r\n    first_air_date,\r\n    genres = [],\r\n    runtime,\r\n    episode_run_time,\r\n    name,\r\n    id,\r\n    production_countries = [],\r\n    budget = 0,\r\n  } = data.movieDetails\r\n\r\n  const handleFavorite = () => {\r\n    if (isFav) {\r\n      dispatch(deleteFavorite(data.movieDetails.id))\r\n    } else {\r\n      dispatch(\r\n        addFavorite({\r\n          id,\r\n          title,\r\n          vote_average,\r\n          poster_path,\r\n          release_date,\r\n          name,\r\n          first_air_date,\r\n          media_type,\r\n        })\r\n      )\r\n    }\r\n  }\r\n\r\n  const genresList = genres.length\r\n    ? genres.map((movie) => ` ${movie.name.toLowerCase()}`).join()\r\n    : null\r\n  const countries = production_countries.length\r\n    ? production_countries.map((e) => ` ${e.name}`).join()\r\n    : null\r\n  const castList = data.cast\r\n    ? data.cast\r\n        .slice(0, 10)\r\n        .map((item) => ` ${item.name}`)\r\n        .join()\r\n    : null\r\n  const formatBudget = `$ ${budget\r\n    .toString()\r\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.')}`\r\n\r\n  return (\r\n    <div className={style.movieDetails}>\r\n      <div className={style.container}>\r\n        <div className={style.leftColumn}>\r\n          <Image src={`https://image.tmdb.org/t/p/w500/${poster_path}`} />\r\n        </div>\r\n        <div className={style.rightColumn}>\r\n          <div className={style.heading}>\r\n            <h2 className={style.title}> {title || name} </h2>\r\n            <span className={style.vote}>\r\n              {`${vote_average} `}\r\n              <img className={style.thumb} src={vote} alt='vote' />\r\n            </span>\r\n          </div>\r\n\r\n          {release_date || first_air_date ? (\r\n            <div className={style.info}>\r\n              <h3 className={style.tagline}>Year</h3>\r\n              <p className={style.text}>\r\n                {(release_date || first_air_date).split('-')[0]}\r\n              </p>\r\n            </div>\r\n          ) : null}\r\n\r\n          {countries ? (\r\n            <div className={style.info}>\r\n              <h3 className={style.tagline}>Country</h3>\r\n              <p className={style.text}>{countries}</p>\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className={style.info}>\r\n            <h3 className={style.tagline}>Genres</h3>\r\n            <p className={style.text}>{genresList}</p>\r\n          </div>\r\n\r\n          {tagline ? (\r\n            <div className={style.info}>\r\n              <h3 className={style.tagline}>Tag</h3>\r\n              <p className={style.text}>{tagline}</p>\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className={style.info}>\r\n            <h3 className={style.tagline}>Cast</h3>\r\n            <p className={style.text}>{castList}</p>\r\n          </div>\r\n\r\n          <div className={style.info}>\r\n            <h3 className={style.tagline}>Runtime</h3>\r\n            <p className={style.text}>\r\n              {episode_run_time || runtime} {' min'}\r\n            </p>\r\n          </div>\r\n\r\n          <div className={style.info}>\r\n            <h3 className={style.tagline}>Budget</h3>\r\n            <p className={style.text}>{formatBudget}</p>\r\n          </div>\r\n\r\n          <h2 className={style.subtitle}>Overview</h2>\r\n          <p className={style.overview}> {overview} </p>\r\n\r\n          <button className={style.btn} onClick={handleFavorite}>\r\n            <img src={isFav ? add : remove} alt='favorite' />\r\n            {isFav ? 'Delete from Favorite' : 'Add to Favorite'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className={style.recommend}>\r\n        <h2 className={style.headline}>Recommendations</h2>\r\n        {similarMovie ? ( <MoviesList movies={similarMovie.moviesList} favorite={favorite} /> ) : null}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\movies\\moviesSlice.tsx",[],"D:\\git\\my-app\\src\\features\\filter\\filerPage.tsx",["152"],"import React from 'react'\r\nimport { FilterGenres } from './filterGenres'\r\nimport { FilterSorting } from './filterSorting'\r\nimport {LoadFilterMovies} from '../movies/moviesLoadFilter'\r\nimport style from './filerPage.module.css'\r\n\r\nexport const FilterPage = () => {\r\n  return (\r\n    <div className={style.filter}>\r\n      <div className={style.sort}>\r\n        <FilterSorting />\r\n      </div>\r\n      <div className={style.genres}>\r\n        <FilterGenres />\r\n      </div>\r\n      <div className={style.movies}>\r\n        <LoadFilterMovies />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\filter\\filterSlice.tsx",[],"D:\\git\\my-app\\src\\features\\search\\moviesSearchPage.tsx",["153","154","155","156"],"import React, { useState, useEffect, useRef, useCallback } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { debounce } from 'lodash'\r\nimport { getMovies,MovieType, MoviesResult } from '../../api/movieApi'\r\nimport { MoviesSearchInput } from './moviesSearchInput'\r\nimport { MoviesSearchList } from './moviesSearchList'\r\nimport style from './moviesSearchPage.module.css'\r\nimport {useDispatch} from 'react-redux'\r\n\r\ntype searchStatus = 'indle' | 'pendiing' | 'succeeded' | 'failed'\r\n\r\nexport const MoviesSearchPage = () => {\r\n  const [isHidden, setHidden] = useState(false)\r\n  const [list, setList] = useState<MovieType[]>([])\r\n  const [data, setData] = useState<MoviesResult | null>(null)\r\n  const [searchStatus, setStatus] = useState<searchStatus>('indle') \r\n  const [error, setError] = useState(null)\r\n  const history = useHistory()\r\n  const location = useLocation()\r\n  const dispatch = useDispatch()\r\n\r\n  const wrapperRef = React.useRef<HTMLDivElement | null>(null)\r\n\r\n  const delay = useCallback(\r\n    debounce((value: string) => {\r\n      \r\n    \r\n      setStatus(\"pendiing\")\r\n      const fetchS = async () => {\r\n        try {\r\n          const data = await getMovies({pathname: '/search', search: value})\r\n          const list = data.moviesList.slice(0, 5)\r\n          setList(list)\r\n          setData(data);\r\n          setStatus('succeeded')\r\n        } catch (err){\r\n          setStatus('failed')\r\n          console.log(\"fail\");\r\n          setError(err)\r\n        }\r\n      }\r\n      if (value.length) {\r\n        fetchS()\r\n      } else {\r\n        setList([])\r\n      }\r\n    }, 500),\r\n    []\r\n  )\r\n\r\n  useEffect(() => {\r\n    setHidden(true)\r\n  }, [location.key])\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (e: MouseEvent): void => {\r\n      if (\r\n        wrapperRef.current &&\r\n        !wrapperRef.current.contains(e.target as Node)\r\n      ) {\r\n        setHidden(true)\r\n      } else {\r\n        setHidden(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener('mousedown', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside)\r\n    }\r\n  },[])\r\n\r\n  const onSearchSubmit = (value: string): void => {\r\n    history.push({\r\n      pathname: '/search',\r\n      search: value\r\n    })\r\n  }\r\n\r\n  let previewList\r\n\r\n  if (list.length === 0 && searchStatus === 'succeeded') {\r\n    previewList = <h2>Not found</h2>\r\n  } else if (error) {\r\n    <h2>{error}</h2>\r\n  } else {\r\n    previewList = <MoviesSearchList movies={list} />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={style.search} ref={wrapperRef}>\r\n        <MoviesSearchInput\r\n          onSearchChange={delay}\r\n          onSearchSubmit={onSearchSubmit}\r\n        />\r\n        <div\r\n          className={\r\n            isHidden\r\n              ? `${style.container} ${style.hidden}`\r\n              : `${style.container}`\r\n          }\r\n        >\r\n          {previewList}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\app\\Navbar.tsx",["157"],"import React, { useEffect, useRef } from 'react'\r\nimport { NavLink, useLocation } from 'react-router-dom'\r\nimport github from './../style/github.svg'\r\nimport style from './navbar.module.css'\r\n\r\nexport const Navbar = () => {\r\n  \r\n  const wrapperRef = useRef<HTMLElement | null>(null)\r\n  const location = useLocation()\r\n  const [isHidden, setHidden] = React.useState<boolean>(true)\r\n\r\n  useEffect(() => {\r\n    function handleClickOutside(e: MouseEvent): void {\r\n      if (\r\n        wrapperRef.current &&\r\n        !wrapperRef.current.contains(e.target as Node)\r\n      ) {\r\n        document.body.classList.remove('overlay')\r\n        setHidden(true)\r\n      }\r\n    }\r\n\r\n    document.addEventListener('mousedown', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setHidden(true)\r\n    document.body.classList.remove('overlay')\r\n  }, [location.key])\r\n\r\n  const handleClickBtn = () => {\r\n    if (isHidden) {\r\n      setHidden(false)\r\n      document.body.classList.toggle('overlay')\r\n    } else {\r\n      setHidden(true)\r\n      document.body.classList.toggle('overlay')\r\n    }\r\n  }\r\n  return (\r\n    <nav className={style.nav} ref={wrapperRef}>\r\n      <div className={style.container}>\r\n        <div\r\n          className={\r\n            isHidden\r\n              ? `${style.toggle}`\r\n              : `${style.toggle} ${style.toggleHidden}`\r\n          }\r\n        >\r\n          <button\r\n            className={style.btn}\r\n            onClick={() => handleClickBtn()}\r\n          ></button>\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n        </div>\r\n        <ul\r\n          className={\r\n            isHidden ? `${style.items}` : `${style.items} ${style.itemsHidden}`\r\n          }\r\n        >\r\n          <li className={style.item}>\r\n            <NavLink\r\n              className={style.link}\r\n              exact\r\n              activeClassName={style.selected}\r\n              to='/'\r\n            >\r\n              Popular\r\n            </NavLink>\r\n          </li>\r\n          <li className={style.item}>\r\n            <NavLink\r\n              className={style.link}\r\n              activeClassName={style.selected}\r\n              to='/upcoming'\r\n            >\r\n              Up comning\r\n            </NavLink>\r\n          </li>\r\n          <li className={style.item}>\r\n            <NavLink\r\n              className={style.link}\r\n              activeClassName={style.selected}\r\n              to='/top_rated'\r\n            >\r\n              Top rated\r\n            </NavLink>\r\n          </li>\r\n          <li className={style.item}>\r\n            <NavLink\r\n              className={style.link}\r\n              activeClassName={style.selected}\r\n              to='/favorite'\r\n            >\r\n              Favorite\r\n            </NavLink>\r\n          </li>\r\n          <li className={style.item}>\r\n            <NavLink\r\n              className={style.link}\r\n              activeClassName={style.selected}\r\n              to='/filter'\r\n            >\r\n              Filter\r\n            </NavLink>\r\n          </li>\r\n          <li className={style.item}>\r\n            <a\r\n              className={style.link}\r\n              href='https://github.com/ethnicolr/Movie-Search'\r\n              target='_blank'\r\n              rel='noopener noreferrer'\r\n            >\r\n              <img\r\n                src={github}\r\n                alt='github'\r\n                className={style.icon}\r\n                width='40'\r\n              />\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\movies\\moviesList.tsx",["158","159","160"],"import React, {useState, useEffect} from 'react'\r\n\r\nimport { MovieType } from '../../api/movieApi'\r\nimport {Movie} from './moviesListItem'\r\nimport style from './moviesList.module.css'\r\n\r\ninterface MoviesProp {\r\n  movies: MovieType[]\r\n  favorite: MovieType[]\r\n}\r\n\r\nexport const MoviesList = ({ movies, favorite }: MoviesProp) => {\r\n  return (\r\n    <ul className={style.moviesList}>\r\n      {movies.map((movie) => {\r\n        const isFav = favorite.some((favorite) => favorite.id === movie.id)\r\n        return (\r\n          <li className={style.item} key={movie.id}>\r\n            <Movie movieData={movie} isFav={isFav} />\r\n          </li>\r\n        )\r\n      })}\r\n    </ul>\r\n  )\r\n}\r\n\r\n","D:\\git\\my-app\\src\\app\\Spinner.tsx",["161"],"import React from 'react'\r\nimport style from './spiner.module.css'\r\n\r\nexport const Spinner = () => {\r\n  return (\r\n    <div className={style.container}>\r\n      <div className={style.threeDots}>\r\n        <span className={style.dot}></span>\r\n        <span className={style.dot}></span>\r\n        <span className={style.dot}></span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Spinner\r\n","D:\\git\\my-app\\src\\features\\filter\\filterGenres.tsx",["162"],"import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { changeGenres } from './filterSlice'\r\nimport { RootState } from '../../app/store'\r\nimport { fetchGenres } from './filterSlice'\r\n\r\nimport style from './filterGenres.module.css'\r\n\r\nexport const FilterGenres = () => {\r\n  const dispatch = useDispatch()\r\n  const genres = useSelector((state: RootState) => state.filter.genres)\r\n  \r\n  useEffect(() => {\r\n    if (genres.length === 0) {\r\n      dispatch(fetchGenres())\r\n    }\r\n  }, [])\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    dispatch(changeGenres(e.currentTarget.name))\r\n  }\r\n\r\n  return (\r\n    <div className={style.genres}>\r\n      <h3 className={style.title}>Genres</h3>\r\n      <ul className={style.list}>\r\n        {genres.length\r\n          ? genres.map((genre) => {\r\n              return (\r\n                <li className={style.item} key={genre.id}>\r\n                  <label className={style.label}>\r\n                    {genre.name}\r\n                    <input\r\n                      type='checkbox'\r\n                      onChange={handleChange}\r\n                      checked={genre.selected}\r\n                      name={genre.id}\r\n                    />\r\n                    <span className={style.checkmark} />\r\n                  </label>\r\n                </li>\r\n              )\r\n            })\r\n          : null}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\filter\\filterSorting.tsx",["163"],"import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { sortBy } from './filterSlice'\r\nimport { RootState } from './../../app/store'\r\nimport style from './filterSorting.module.css'\r\n\r\nexport const FilterSorting = () => {\r\n  const dispatch = useDispatch()\r\n  const active = useSelector((state: RootState) => state.filter.sortBy)\r\n\r\n  const handleSort = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    dispatch(sortBy(e.currentTarget.name))\r\n  }\r\n\r\n  const sortActivity = (field: string) => {\r\n    return active === `${field}.desc`\r\n      ? `${style.sortBtn} ${style.desc}`\r\n      : `${style.sortBtn} ${style.asc}`\r\n  }\r\n\r\n  return (\r\n    <div className={style.sort}>\r\n      <h3 className={style.title}>Sort by</h3>\r\n      <ul className={style.items}>\r\n        <li className={style.item}>\r\n          <button\r\n            className={sortActivity('popularity')}\r\n            name='popularity'\r\n            onClick={handleSort}\r\n          >\r\n            popularity\r\n          </button>\r\n        </li>\r\n        <li className={style.item}>\r\n          <button\r\n            className={sortActivity('release_date')}\r\n            name='release_date'\r\n            onClick={handleSort}\r\n          >\r\n            date\r\n          </button>\r\n        </li>\r\n        <li className={style.item}>\r\n          <button\r\n            className={sortActivity('vote_average')}\r\n            name='vote_average'\r\n            onClick={handleSort}\r\n          >\r\n            rating\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\api\\movieApi.tsx",[],"D:\\git\\my-app\\src\\features\\search\\moviesSearchInput.tsx",["164","165"],"import React, { useState } from 'react'\r\n\r\nimport seach from './../../style/search.svg'\r\nimport style from './moviesSearchInput.module.css'\r\ninterface InputProps {\r\n  onSearchChange(value: string): void\r\n  onSearchSubmit(value: string): void\r\n}\r\n\r\nexport const MoviesSearchInput = ({\r\n  onSearchChange,\r\n  onSearchSubmit,\r\n}: InputProps) => {\r\n  const [value, setValue] = useState('')\r\n  const inputEl = React.useRef<HTMLInputElement>(null!)\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    const value = e.currentTarget.value\r\n    setValue(value)\r\n    onSearchChange(value)\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault()\r\n    if (value.length) {\r\n      onSearchSubmit(value)\r\n      inputEl.current.blur()\r\n      document.body.style.overflow = 'auto'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          ref={inputEl}\r\n          className={style.input}\r\n          type='text'\r\n          value={value}\r\n          onChange={handleChange}\r\n          placeholder='Seacrh movie...'\r\n        />\r\n        <button className={style.btn}>\r\n          <img src={seach} alt='seach' />\r\n        </button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\search\\moviesSearchList.tsx",[],"D:\\git\\my-app\\src\\features\\movies\\moviesListItem.tsx",[],"D:\\git\\my-app\\src\\features\\search\\moviesSearchItem.tsx",["166"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { MovieType } from '../../api/movieApi'\r\nimport {Image} from '../../app/image'\r\nimport star from './../../style/star.svg'\r\nimport style from './moviesSearchItem.module.css'\r\n\r\ntype Props = { movie: MovieType }\r\n\r\nexport const MoviesSearchItem = ({ movie }: Props) => {\r\n  const {\r\n    title,\r\n    name,\r\n    release_date,\r\n    first_air_date,\r\n    poster_path,\r\n    id,\r\n    vote_average,\r\n    media_type,\r\n  } = movie\r\n  const link = media_type ? media_type : 'movie'\r\n  return (\r\n    <Link to={`/${link}/${id}`} className={style.item}>\r\n      <Image\r\n        src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\r\n        size={'40px'}\r\n      />\r\n      <h2 className={style.title}>\r\n        {`${title || name} ${\r\n          release_date || first_air_date\r\n            ? `(${(release_date || first_air_date).split(/-/)[0]})`\r\n            : null\r\n        }`}\r\n      </h2>\r\n      <span className={style.vote}>\r\n        {vote_average ? vote_average.toFixed(1) : 0}\r\n        <img className={style.thumb} src={star} alt='vote' />\r\n      </span>\r\n    </Link>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\app\\image.tsx",["167"],"import React, { useState, useEffect } from 'react'\r\nimport error from './../style/error.png'\r\n\r\ninterface Props {\r\n  src: string\r\n  size?: string\r\n}\r\n\r\nexport const Image = ({ src, size = '100%' }: Props) => {\r\n  const [fallback, setFallback] = useState(src)\r\n  const [errored, setError] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setFallback(src)\r\n  }, [src])\r\n\r\n  const handleError = () => {\r\n    if (!errored) {\r\n      setError(true)\r\n      setFallback(error)\r\n    }\r\n  }\r\n\r\n  const style = {\r\n    width: size,\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <img src={fallback} onError={handleError} alt='poster' style={style} />\r\n    </>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\hooks\\useFetch.tsx",["168","169","170","171"],"import React, { useEffect, useState, useReducer } from 'react'\r\nimport { isEqual } from 'lodash'\r\nimport {\r\n  fetchMovieType,\r\n  getMovies,\r\n  Options,\r\n  MoviesResult,\r\n} from '../api/movieApi'\r\nimport { usePrevious } from './usePrevious'\r\n\r\ninterface Props {\r\n  pathname: fetchMovieType\r\n  options: Options\r\n}\r\n\r\ntype Status = 'indle' | 'fetching' | 'fetched' | 'error'\r\n\r\ninterface State {\r\n  data: MoviesResult | null\r\n  status: Status\r\n  error: string | null\r\n}\r\n\r\ntype ACTIONTYPE =\r\n  | { type: 'FETCHING' }\r\n  | { type: 'FETCHED'; payload: MoviesResult }\r\n  | { type: 'FETCH_ERROR'; payload: string }\r\n\r\nfunction reducer(state: State, action: ACTIONTYPE): State {\r\n  switch (action.type) {\r\n    case 'FETCHING':\r\n      return { ...state, status: 'fetching' }\r\n    case 'FETCHED':\r\n      return { ...state, status: 'fetched', data: action.payload }\r\n    case 'FETCH_ERROR':\r\n      return { ...state, status: 'error', error: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\nexport const useFetch = ( options :Options) => {\r\n  console.log(options.pathname);\r\n  const initialState: State = {\r\n    data: null,\r\n    status: 'indle',\r\n    error: null\r\n  }\r\n  const previousOptions = usePrevious(options)\r\n  \r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n  useEffect(() => {\r\n    if (!options) return\r\n    if(isEqual(previousOptions, options)) return\r\n      const fetchData = async () => {\r\n        dispatch({ type: 'FETCHING' })\r\n        try {\r\n          const response = await getMovies(options)\r\n          dispatch({ type: 'FETCHED', payload: response })\r\n        } catch (err) {\r\n          dispatch({ type: 'FETCH_ERROR', payload: err })\r\n        }\r\n      }\r\n      fetchData()\r\n    \r\n  }, [options])\r\n\r\n  return state\r\n}\r\n","D:\\git\\my-app\\src\\hooks\\usePrevious.tsx",["172","173","174","175","176","177","178","179"],"import React, { useEffect, useState, useReducer, useRef } from 'react'\r\n\r\nimport {\r\n    fetchMovieType,\r\n    getMovies,\r\n    Options,\r\n    MoviesResult,\r\n  } from '../api/movieApi'\r\n\r\n  export function usePrevious<T>(value: T) {\r\n    const ref = useRef<T>();\r\n    useEffect(() => {\r\n      ref.current = value;\r\n    });\r\n    return ref.current as T;\r\n  }","D:\\git\\my-app\\src\\app\\pagination.tsx",["180"],"import React from \"react\";\r\nimport Paginate, {ReactPaginateProps} from 'react-paginate';\r\nimport style from './pagination.module.css'\r\n\r\nexport type OnPageChangeCallback = ReactPaginateProps['onPageChange']\r\n\r\ninterface Props {\r\n    currentPage: number\r\n    pageCount: number\r\n    onPageChange?: OnPageChangeCallback\r\n}\r\n\r\nexport const Pagination = ({ currentPage, onPageChange, pageCount }: Props) => {\r\n    return (\r\n        <Paginate\r\n        forcePage={currentPage}\r\n        pageCount={pageCount}\r\n        marginPagesDisplayed={2}\r\n        pageRangeDisplayed={5}\r\n        onPageChange={onPageChange}\r\n        nextLabel=\"&rarr;\"\r\n        previousLabel=\"&larr;\"\r\n        containerClassName={style.pagination}\r\n        activeClassName={style.active}\r\n      />\r\n    )\r\n}","D:\\git\\my-app\\src\\app\\moviesList.tsx",["181","182","183"],"import React, {useState, useEffect} from 'react'\r\n\r\nimport { MovieType } from '..//api/movieApi'\r\nimport {Movie} from './../features/movies/moviesListItem'\r\nimport style from './moviesList.module.css'\r\n\r\ninterface MoviesProp {\r\n  movies: MovieType[]\r\n  favorite: MovieType[]\r\n}\r\n\r\nexport const MoviesList = ({ movies, favorite }: MoviesProp) => {\r\n  return (\r\n    <ul className={style.moviesList}>\r\n      {movies.map((movie) => {\r\n        const isFav = favorite.some((favorite) => favorite.id === movie.id)\r\n        return (\r\n          <li className={style.item} key={movie.id}>\r\n            <Movie movieData={movie} isFav={isFav} />\r\n          </li>\r\n        )\r\n      })}\r\n    </ul>\r\n  )\r\n}\r\n\r\n",[],"D:\\git\\my-app\\src\\features\\movies\\moviesListPage.tsx",["184"],"import React from 'react'\r\nimport { Status, MoviesResult } from '../../api/movieApi'\r\nimport { Pagination, OnPageChangeCallback } from '../../app/pagination'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootState } from '../../app/store'\r\nimport { MoviesList } from './moviesList'\r\nimport { Spinner } from './../../app/Spinner'\r\nimport style from './moviesListPage.module.css'\r\n\r\ninterface Props {\r\n  status: Status\r\n  moviesData: MoviesResult | null\r\n  onPageChange: OnPageChangeCallback\r\n}\r\n\r\nexport const MoviesListPage = ({ status, moviesData, onPageChange }: Props) => {\r\n  const favorite = useSelector((state: RootState) => state.movies.favorite)\r\n\r\n  if (moviesData == null || status == 'fetching') {\r\n    return (\r\n      <div className={style.listMovies}>\r\n        <Spinner />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (status == 'fetched' && moviesData.moviesList.length == 0) {\r\n    return (\r\n      <div className={style.listMovies}>\r\n        <h2>Not fount</h2>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const { moviesList, totalPages, page } = moviesData\r\n  return (\r\n    <div className={style.listMovies}>\r\n      <MoviesList movies={moviesList} favorite={favorite} />\r\n      <Pagination\r\n        pageCount={totalPages}\r\n        currentPage={page}\r\n        onPageChange={onPageChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\movies\\moviesLoadCategory.tsx",["185"],"import React, { useState } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { fetchMovieType } from '../../api/movieApi'\r\nimport { useFetch } from '../../hooks/useFetch'\r\nimport { MoviesListPage } from './moviesListPage'\r\nimport { OnPageChangeCallback } from '../../app/pagination'\r\n\r\nexport const moviesCategory = () => {\r\n  const location = useLocation()\r\n  const pathname = location.pathname as fetchMovieType\r\n  const [page, setPage] = useState(1)\r\n\r\n  const onPageChange: OnPageChangeCallback = (selectedItem) => {\r\n    const newPage = selectedItem.selected + 1\r\n    setPage(newPage)\r\n  }\r\n\r\n  const { status, data } = useFetch({ pathname, page })\r\n\r\n  return (\r\n    <MoviesListPage\r\n      status={status}\r\n      moviesData={data}\r\n      onPageChange={onPageChange}\r\n    />\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\movies\\moviesLoadSearch.tsx",["186"],"D:\\git\\my-app\\src\\features\\movies\\moviesLoadFilter.tsx",["187"],"import React, { useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootState } from '../../app/store'\r\nimport { useFetch } from '../../hooks/useFetch'\r\nimport { MoviesListPage } from './moviesListPage'\r\nimport { OnPageChangeCallback } from '../../app/pagination'\r\n\r\nexport const LoadFilterMovies = () => {\r\n  const [page, setPage] = useState(1)\r\n  const { genres, sortBy } = useSelector((state: RootState) => state.filter)\r\n\r\n  const selectedGenres = genres\r\n    .filter((genre) => genre.selected)\r\n    .map((genre) => genre.id)\r\n\r\n  const onPageChange: OnPageChangeCallback = (selectedItem) => {\r\n    const newPage = selectedItem.selected + 1\r\n    setPage(newPage)\r\n  }\r\n\r\n  const { status, data } = useFetch({\r\n    pathname: '/filter',\r\n    sortBy,\r\n    genres: selectedGenres,\r\n    page,\r\n  })\r\n\r\n  return (\r\n    <MoviesListPage\r\n      status={status}\r\n      moviesData={data}\r\n      onPageChange={onPageChange}\r\n    />\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\movies\\moviesLoadFavorite.tsx",["188"],"import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootState } from '../../app/store'\r\nimport {MoviesList} from './moviesList'\r\nimport style from './moviesListPage.module.css'\r\n\r\nexport const moviesFavorite = () => {\r\n\r\n  const movies = useSelector((state: RootState) => state.movies.favorite)\r\n\r\n  return (\r\n      <div className={style.listMovies}>\r\n          <MoviesList movies={movies} favorite={movies}/>\r\n      </div>\r\n  )\r\n}\r\n",{"ruleId":"189","severity":1,"message":"190","line":23,"column":8,"nodeType":"191","messageId":"192","endLine":23,"endColumn":33},{"ruleId":"189","severity":1,"message":"193","line":23,"column":26,"nodeType":"194","messageId":"195","endLine":23,"endColumn":32},{"ruleId":"189","severity":1,"message":"190","line":129,"column":8,"nodeType":"191","messageId":"192","endLine":129,"endColumn":29},{"ruleId":"189","severity":1,"message":"190","line":10,"column":1,"nodeType":"191","messageId":"192","endLine":10,"endColumn":15},{"ruleId":"189","severity":1,"message":"190","line":8,"column":23,"nodeType":"196","messageId":"192","endLine":8,"endColumn":28},{"ruleId":"189","severity":1,"message":"190","line":21,"column":29,"nodeType":"196","messageId":"192","endLine":21,"endColumn":34},{"ruleId":"189","severity":1,"message":"190","line":7,"column":27,"nodeType":"196","messageId":"192","endLine":7,"endColumn":32},{"ruleId":"197","severity":1,"message":"198","line":1,"column":38,"nodeType":"194","messageId":"199","endLine":1,"endColumn":44},{"ruleId":"189","severity":1,"message":"190","line":12,"column":33,"nodeType":"196","messageId":"192","endLine":12,"endColumn":38},{"ruleId":"197","severity":1,"message":"200","line":15,"column":10,"nodeType":"194","messageId":"199","endLine":15,"endColumn":14},{"ruleId":"197","severity":1,"message":"201","line":20,"column":9,"nodeType":"194","messageId":"199","endLine":20,"endColumn":17},{"ruleId":"189","severity":1,"message":"190","line":6,"column":23,"nodeType":"196","messageId":"192","endLine":6,"endColumn":28},{"ruleId":"197","severity":1,"message":"202","line":1,"column":16,"nodeType":"194","messageId":"199","endLine":1,"endColumn":24},{"ruleId":"197","severity":1,"message":"203","line":1,"column":26,"nodeType":"194","messageId":"199","endLine":1,"endColumn":35},{"ruleId":"189","severity":1,"message":"190","line":12,"column":27,"nodeType":"196","messageId":"192","endLine":12,"endColumn":64},{"ruleId":"189","severity":1,"message":"190","line":4,"column":24,"nodeType":"196","messageId":"192","endLine":4,"endColumn":29},{"ruleId":"189","severity":1,"message":"190","line":9,"column":29,"nodeType":"196","messageId":"192","endLine":9,"endColumn":34},{"ruleId":"189","severity":1,"message":"190","line":7,"column":30,"nodeType":"196","messageId":"192","endLine":7,"endColumn":35},{"ruleId":"189","severity":1,"message":"190","line":10,"column":34,"nodeType":"196","messageId":"192","endLine":13,"endColumn":18},{"ruleId":"204","severity":1,"message":"205","line":15,"column":50,"nodeType":"206","messageId":"207","endLine":15,"endColumn":55},{"ruleId":"189","severity":1,"message":"190","line":10,"column":33,"nodeType":"196","messageId":"192","endLine":10,"endColumn":54},{"ruleId":"189","severity":1,"message":"190","line":9,"column":22,"nodeType":"196","messageId":"192","endLine":9,"endColumn":56},{"ruleId":"197","severity":1,"message":"208","line":1,"column":8,"nodeType":"194","messageId":"199","endLine":1,"endColumn":13},{"ruleId":"197","severity":1,"message":"202","line":1,"column":28,"nodeType":"194","messageId":"199","endLine":1,"endColumn":36},{"ruleId":"197","severity":1,"message":"209","line":11,"column":11,"nodeType":"194","messageId":"199","endLine":11,"endColumn":16},{"ruleId":"189","severity":1,"message":"190","line":43,"column":25,"nodeType":"196","messageId":"192","endLine":43,"endColumn":47},{"ruleId":"197","severity":1,"message":"208","line":1,"column":8,"nodeType":"194","messageId":"199","endLine":1,"endColumn":13},{"ruleId":"197","severity":1,"message":"202","line":1,"column":28,"nodeType":"194","messageId":"199","endLine":1,"endColumn":36},{"ruleId":"197","severity":1,"message":"210","line":1,"column":38,"nodeType":"194","messageId":"199","endLine":1,"endColumn":48},{"ruleId":"197","severity":1,"message":"211","line":4,"column":5,"nodeType":"194","messageId":"199","endLine":4,"endColumn":19},{"ruleId":"197","severity":1,"message":"212","line":5,"column":5,"nodeType":"194","messageId":"199","endLine":5,"endColumn":14},{"ruleId":"197","severity":1,"message":"213","line":6,"column":5,"nodeType":"194","messageId":"199","endLine":6,"endColumn":12},{"ruleId":"197","severity":1,"message":"214","line":7,"column":5,"nodeType":"194","messageId":"199","endLine":7,"endColumn":17},{"ruleId":"189","severity":1,"message":"190","line":10,"column":10,"nodeType":"191","messageId":"192","endLine":10,"endColumn":43},{"ruleId":"189","severity":1,"message":"190","line":13,"column":27,"nodeType":"196","messageId":"192","endLine":13,"endColumn":79},{"ruleId":"197","severity":1,"message":"202","line":1,"column":16,"nodeType":"194","messageId":"199","endLine":1,"endColumn":24},{"ruleId":"197","severity":1,"message":"203","line":1,"column":26,"nodeType":"194","messageId":"199","endLine":1,"endColumn":35},{"ruleId":"189","severity":1,"message":"190","line":12,"column":27,"nodeType":"196","messageId":"192","endLine":12,"endColumn":64},{"ruleId":"189","severity":1,"message":"190","line":16,"column":31,"nodeType":"196","messageId":"192","endLine":16,"endColumn":79},{"ruleId":"189","severity":1,"message":"190","line":8,"column":31,"nodeType":"196","messageId":"192","endLine":8,"endColumn":36},{"ruleId":"189","severity":1,"message":"190","line":7,"column":29,"nodeType":"196","messageId":"192","endLine":7,"endColumn":34},{"ruleId":"189","severity":1,"message":"190","line":8,"column":33,"nodeType":"196","messageId":"192","endLine":8,"endColumn":38},{"ruleId":"189","severity":1,"message":"190","line":7,"column":31,"nodeType":"196","messageId":"192","endLine":7,"endColumn":36},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","Argument 'config' should be typed.","Identifier","missingArgType","ArrowFunctionExpression","@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","unusedVar","'data' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","'React' is defined but never used.","'Props' is defined but never used.","'useReducer' is defined but never used.","'fetchMovieType' is defined but never used.","'getMovies' is defined but never used.","'Options' is defined but never used.","'MoviesResult' is defined but never used."]