[{"D:\\git\\my-app\\src\\index.tsx":"1","D:\\git\\my-app\\src\\serviceWorker.js":"2","D:\\git\\my-app\\src\\app\\App.tsx":"3","D:\\git\\my-app\\src\\app\\store.tsx":"4","D:\\git\\my-app\\src\\app\\Header.tsx":"5","D:\\git\\my-app\\src\\features\\movies\\moviesListPage.tsx":"6","D:\\git\\my-app\\src\\features\\movies\\movieDetails.tsx":"7","D:\\git\\my-app\\src\\features\\movies\\moviesSlice.tsx":"8","D:\\git\\my-app\\src\\features\\filter\\filerPage.tsx":"9","D:\\git\\my-app\\src\\features\\filter\\filterSlice.tsx":"10","D:\\git\\my-app\\src\\features\\search\\moviesSearchSlice.tsx":"11","D:\\git\\my-app\\src\\features\\search\\moviesSearchPage.tsx":"12","D:\\git\\my-app\\src\\app\\Navbar.tsx":"13","D:\\git\\my-app\\src\\features\\movies\\moviesList.tsx":"14","D:\\git\\my-app\\src\\app\\Spinner.tsx":"15","D:\\git\\my-app\\src\\features\\filter\\filterGenres.tsx":"16","D:\\git\\my-app\\src\\features\\filter\\filterSorting.tsx":"17","D:\\git\\my-app\\src\\api\\movieApi.tsx":"18","D:\\git\\my-app\\src\\features\\search\\moviesSearchInput.tsx":"19","D:\\git\\my-app\\src\\features\\search\\moviesSearchList.tsx":"20","D:\\git\\my-app\\src\\features\\movies\\moviesListItem.tsx":"21","D:\\git\\my-app\\src\\features\\search\\moviesSearchItem.tsx":"22","D:\\git\\my-app\\src\\app\\image.tsx":"23"},{"size":674,"mtime":1606913633530,"results":"24","hashOfConfig":"25"},{"size":4951,"mtime":499162500000,"results":"26","hashOfConfig":"25"},{"size":919,"mtime":1606827683005,"results":"27","hashOfConfig":"25"},{"size":472,"mtime":1606914168355,"results":"28","hashOfConfig":"25"},{"size":658,"mtime":1606914050930,"results":"29","hashOfConfig":"25"},{"size":2659,"mtime":1606914375303,"results":"30","hashOfConfig":"25"},{"size":5315,"mtime":1606892358918,"results":"31","hashOfConfig":"25"},{"size":2155,"mtime":1606914023969,"results":"32","hashOfConfig":"25"},{"size":582,"mtime":1606834745457,"results":"33","hashOfConfig":"25"},{"size":1295,"mtime":1606831631501,"results":"34","hashOfConfig":"25"},{"size":1472,"mtime":1606671588749,"results":"35","hashOfConfig":"25"},{"size":2720,"mtime":1606836174939,"results":"36","hashOfConfig":"25"},{"size":3598,"mtime":1606894090973,"results":"37","hashOfConfig":"25"},{"size":686,"mtime":1606893753668,"results":"38","hashOfConfig":"25"},{"size":389,"mtime":1606734918686,"results":"39","hashOfConfig":"25"},{"size":1448,"mtime":1606914354611,"results":"40","hashOfConfig":"25"},{"size":1559,"mtime":1606834502703,"results":"41","hashOfConfig":"25"},{"size":4329,"mtime":1606893269699,"results":"42","hashOfConfig":"25"},{"size":1259,"mtime":1606730899596,"results":"43","hashOfConfig":"25"},{"size":572,"mtime":1606670838647,"results":"44","hashOfConfig":"25"},{"size":2178,"mtime":1606893749680,"results":"45","hashOfConfig":"25"},{"size":1139,"mtime":1606671350186,"results":"46","hashOfConfig":"25"},{"size":641,"mtime":1606914063502,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2u5vyz",{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"57"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"57"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"57"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"57"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"57"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\git\\my-app\\src\\index.tsx",[],"D:\\git\\my-app\\src\\serviceWorker.js",["105","106","107"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",[],"D:\\git\\my-app\\src\\app\\App.tsx",["108"],"import React from 'react'\r\nimport { Route, Switch } from 'react-router'\r\nimport { Header } from './Header'\r\nimport { MoviesListPage } from '../features/movies/moviesListPage'\r\nimport { MovieDetails } from '../features/movies/movieDetails'\r\nimport { FilterPage } from '../features/filter/filerPage'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path='/' component={MoviesListPage} />\r\n        <Route exact path='/upcoming' component={MoviesListPage} />\r\n        <Route exact path='/top_rated' component={MoviesListPage} />\r\n        <Route exact path='/search' component={MoviesListPage} />\r\n        <Route exact path='/favorite' component={MoviesListPage} />\r\n\r\n        <Route exact path='/filter' component={FilterPage} />\r\n\r\n        <Route exact path={`/:media_type/:movieId`} component={MovieDetails} />\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n",[],"D:\\git\\my-app\\src\\app\\store.tsx",[],"D:\\git\\my-app\\src\\app\\Header.tsx",["109"],"D:\\git\\my-app\\src\\features\\movies\\moviesListPage.tsx",["110","111"],"D:\\git\\my-app\\src\\features\\movies\\movieDetails.tsx",["112"],"D:\\git\\my-app\\src\\features\\movies\\moviesSlice.tsx",[],"D:\\git\\my-app\\src\\features\\filter\\filerPage.tsx",["113"],"import React from 'react'\r\nimport { FilterGenres } from './filterGenres'\r\nimport { FilterSorting } from './filterSorting'\r\nimport { MoviesListPage } from '../movies/moviesListPage'\r\nimport style from './filerPage.module.css'\r\n\r\nexport const FilterPage = () => {\r\n  return (\r\n    <div className={style.filter}>\r\n      <div className={style.sort}>\r\n        <FilterSorting />\r\n      </div>\r\n      <div className={style.genres}>\r\n        <FilterGenres />\r\n      </div>\r\n      <div className={style.movies}>\r\n        <MoviesListPage grid={'medium'} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\filter\\filterSlice.tsx",[],"D:\\git\\my-app\\src\\features\\search\\moviesSearchSlice.tsx",[],"D:\\git\\my-app\\src\\features\\search\\moviesSearchPage.tsx",["114","115"],"import React, { useState, useEffect, useRef, useCallback } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { debounce } from 'lodash'\r\nimport { getMovies,MovieType } from '../../api/movieApi'\r\nimport { MoviesSearchInput } from './moviesSearchInput'\r\nimport { MoviesSearchList } from './moviesSearchList'\r\nimport style from './moviesSearchPage.module.css'\r\n\r\ntype searchStatus = 'indle' | 'pendiing' | 'succeeded' | 'failed'\r\n\r\nexport const MoviesSearchPage = () => {\r\n  const [isHidden, setHidden] = useState(false)\r\n  const [list, setList] = useState<MovieType[]>([])\r\n  const [searchStatus, setStatus] = useState<searchStatus>('indle') \r\n  const [error, setError] = useState(null)\r\n  const history = useHistory()\r\n  const location = useLocation()\r\n\r\n  const wrapperRef = React.useRef<HTMLDivElement | null>(null)\r\n\r\n  const delay = useCallback(\r\n    debounce((value: string) => {\r\n      setStatus(\"pendiing\")\r\n      const fetchS = async () => {\r\n        try {\r\n          const data = await getMovies('/search', {search: value})\r\n          const list = data.moviesList.slice(0, 5)\r\n          setList(list)\r\n          setStatus('succeeded')\r\n        } catch (err){\r\n          setStatus('failed')\r\n          setError(err)\r\n        }\r\n      }\r\n      if (value.length) {\r\n        fetchS()\r\n      } else {\r\n        setList([])\r\n      }\r\n    }, 500),\r\n    []\r\n  )\r\n\r\n  useEffect(() => {\r\n    setHidden(true)\r\n  }, [location.key])\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (e: MouseEvent): void => {\r\n      if (\r\n        wrapperRef.current &&\r\n        !wrapperRef.current.contains(e.target as Node)\r\n      ) {\r\n        setHidden(true)\r\n      } else {\r\n        setHidden(false)\r\n      }\r\n    }\r\n\r\n    document.addEventListener('mousedown', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside)\r\n    }\r\n  },[])\r\n\r\n  const onSearchSubmit = (value: string): void => {\r\n    history.push({\r\n      pathname: '/search',\r\n      search: value\r\n    })\r\n  }\r\n\r\n  let previewList\r\n\r\n  if (list.length === 0 && searchStatus === 'succeeded') {\r\n    previewList = <h2>Not found</h2>\r\n  } else if (error) {\r\n    <h2>{error}</h2>\r\n  } else {\r\n    previewList = <MoviesSearchList movies={list} />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={style.search} ref={wrapperRef}>\r\n        <MoviesSearchInput\r\n          onSearchChange={delay}\r\n          onSearchSubmit={onSearchSubmit}\r\n        />\r\n        <div\r\n          className={\r\n            isHidden\r\n              ? `${style.container} ${style.hidden}`\r\n              : `${style.container}`\r\n          }\r\n        >\r\n          {previewList}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\app\\Navbar.tsx",["116"],"D:\\git\\my-app\\src\\features\\movies\\moviesList.tsx",["117","118","119"],"import React, {useState, useEffect} from 'react'\r\n\r\nimport { MovieType } from '../../api/movieApi'\r\nimport {Movie} from './moviesListItem'\r\nimport style from './moviesList.module.css'\r\n\r\ninterface MoviesProp {\r\n  movies: MovieType[]\r\n  favorite: MovieType[]\r\n}\r\n\r\nconst List = ({ movies, favorite }: MoviesProp) => {\r\n  return (\r\n    <ul className={style.moviesList}>\r\n      {movies.map((movie) => {\r\n        const isFav = favorite.some((favorite) => favorite.id === movie.id)\r\n        return (\r\n          <li className={style.item} key={movie.id}>\r\n            <Movie movieData={movie} isFav={isFav} />\r\n          </li>\r\n        )\r\n      })}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default List\r\n","D:\\git\\my-app\\src\\app\\Spinner.tsx",["120"],"import React from 'react'\r\nimport style from './spiner.module.css'\r\n\r\nexport const Spinner = () => {\r\n  return (\r\n    <div className={style.container}>\r\n      <div className={style.threeDots}>\r\n        <span className={style.dot}></span>\r\n        <span className={style.dot}></span>\r\n        <span className={style.dot}></span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Spinner\r\n","D:\\git\\my-app\\src\\features\\filter\\filterGenres.tsx",["121"],"D:\\git\\my-app\\src\\features\\filter\\filterSorting.tsx",["122"],"import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { sortBy } from './filterSlice'\r\nimport { RootState } from './../../app/store'\r\nimport style from './filterSorting.module.css'\r\n\r\nexport const FilterSorting = () => {\r\n  const dispatch = useDispatch()\r\n  const active = useSelector((state: RootState) => state.filter.sortBy)\r\n\r\n  const handleSort = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    dispatch(sortBy(e.currentTarget.name))\r\n  }\r\n\r\n  const sortActivity = (field: string) => {\r\n    return active === `${field}.desc`\r\n      ? `${style.sortBtn} ${style.desc}`\r\n      : `${style.sortBtn} ${style.asc}`\r\n  }\r\n\r\n  return (\r\n    <div className={style.sort}>\r\n      <h3 className={style.title}>Sort by</h3>\r\n      <ul className={style.items}>\r\n        <li className={style.item}>\r\n          <button\r\n            className={sortActivity('popularity')}\r\n            name='popularity'\r\n            onClick={handleSort}\r\n          >\r\n            popularity\r\n          </button>\r\n        </li>\r\n        <li className={style.item}>\r\n          <button\r\n            className={sortActivity('release_date')}\r\n            name='release_date'\r\n            onClick={handleSort}\r\n          >\r\n            date\r\n          </button>\r\n        </li>\r\n        <li className={style.item}>\r\n          <button\r\n            className={sortActivity('vote_average')}\r\n            name='vote_average'\r\n            onClick={handleSort}\r\n          >\r\n            rating\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\api\\movieApi.tsx",[],"D:\\git\\my-app\\src\\features\\search\\moviesSearchInput.tsx",["123","124"],"import React, { useState } from 'react'\r\n\r\nimport seach from './../../style/search.svg'\r\nimport style from './moviesSearchInput.module.css'\r\ninterface InputProps {\r\n  onSearchChange(value: string): void\r\n  onSearchSubmit(value: string): void\r\n}\r\n\r\nexport const MoviesSearchInput = ({\r\n  onSearchChange,\r\n  onSearchSubmit,\r\n}: InputProps) => {\r\n  const [value, setValue] = useState('')\r\n  const inputEl = React.useRef<HTMLInputElement>(null!)\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    const value = e.currentTarget.value\r\n    setValue(value)\r\n    onSearchChange(value)\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault()\r\n    if (value.length) {\r\n      onSearchSubmit(value)\r\n      inputEl.current.blur()\r\n      document.body.style.overflow = 'auto'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          ref={inputEl}\r\n          className={style.input}\r\n          type='text'\r\n          value={value}\r\n          onChange={handleChange}\r\n          placeholder='Seacrh movie...'\r\n        />\r\n        <button className={style.btn}>\r\n          <img src={seach} alt='seach' />\r\n        </button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\features\\search\\moviesSearchList.tsx",[],"D:\\git\\my-app\\src\\features\\movies\\moviesListItem.tsx",[],"D:\\git\\my-app\\src\\features\\search\\moviesSearchItem.tsx",["125"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { MovieType } from '../../api/movieApi'\r\nimport {Image} from '../../app/image'\r\nimport star from './../../style/star.svg'\r\nimport style from './moviesSearchItem.module.css'\r\n\r\ntype Props = { movie: MovieType }\r\n\r\nexport const MoviesSearchItem = ({ movie }: Props) => {\r\n  const {\r\n    title,\r\n    name,\r\n    release_date,\r\n    first_air_date,\r\n    poster_path,\r\n    id,\r\n    vote_average,\r\n    media_type,\r\n  } = movie\r\n  const link = media_type ? media_type : 'movie'\r\n  return (\r\n    <Link to={`/${link}/${id}`} className={style.item}>\r\n      <Image\r\n        src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\r\n        size={'40px'}\r\n      />\r\n      <h2 className={style.title}>\r\n        {`${title || name} ${\r\n          release_date || first_air_date\r\n            ? `(${(release_date || first_air_date).split(/-/)[0]})`\r\n            : null\r\n        }`}\r\n      </h2>\r\n      <span className={style.vote}>\r\n        {vote_average ? vote_average.toFixed(1) : 0}\r\n        <img className={style.thumb} src={star} alt='vote' />\r\n      </span>\r\n    </Link>\r\n  )\r\n}\r\n","D:\\git\\my-app\\src\\app\\image.tsx",["126"],{"ruleId":"127","severity":1,"message":"128","line":23,"column":8,"nodeType":"129","messageId":"130","endLine":23,"endColumn":33},{"ruleId":"127","severity":1,"message":"131","line":23,"column":26,"nodeType":"132","messageId":"133","endLine":23,"endColumn":32},{"ruleId":"127","severity":1,"message":"128","line":129,"column":8,"nodeType":"129","messageId":"130","endLine":129,"endColumn":29},{"ruleId":"127","severity":1,"message":"128","line":8,"column":1,"nodeType":"129","messageId":"130","endLine":8,"endColumn":15},{"ruleId":"127","severity":1,"message":"128","line":8,"column":23,"nodeType":"134","messageId":"130","endLine":8,"endColumn":28},{"ruleId":"127","severity":1,"message":"128","line":16,"column":31,"nodeType":"134","messageId":"130","endLine":16,"endColumn":69},{"ruleId":"135","severity":1,"message":"136","line":16,"column":43,"nodeType":"132","messageId":"137","endLine":16,"endColumn":47},{"ruleId":"127","severity":1,"message":"128","line":21,"column":29,"nodeType":"134","messageId":"130","endLine":21,"endColumn":34},{"ruleId":"127","severity":1,"message":"128","line":7,"column":27,"nodeType":"134","messageId":"130","endLine":7,"endColumn":32},{"ruleId":"135","severity":1,"message":"138","line":1,"column":38,"nodeType":"132","messageId":"137","endLine":1,"endColumn":44},{"ruleId":"127","severity":1,"message":"128","line":11,"column":33,"nodeType":"134","messageId":"130","endLine":11,"endColumn":38},{"ruleId":"127","severity":1,"message":"128","line":6,"column":23,"nodeType":"134","messageId":"130","endLine":6,"endColumn":28},{"ruleId":"135","severity":1,"message":"139","line":1,"column":16,"nodeType":"132","messageId":"137","endLine":1,"endColumn":24},{"ruleId":"135","severity":1,"message":"140","line":1,"column":26,"nodeType":"132","messageId":"137","endLine":1,"endColumn":35},{"ruleId":"127","severity":1,"message":"128","line":12,"column":14,"nodeType":"134","messageId":"130","endLine":12,"endColumn":51},{"ruleId":"127","severity":1,"message":"128","line":4,"column":24,"nodeType":"134","messageId":"130","endLine":4,"endColumn":29},{"ruleId":"127","severity":1,"message":"128","line":9,"column":29,"nodeType":"134","messageId":"130","endLine":9,"endColumn":34},{"ruleId":"127","severity":1,"message":"128","line":7,"column":30,"nodeType":"134","messageId":"130","endLine":7,"endColumn":35},{"ruleId":"127","severity":1,"message":"128","line":10,"column":34,"nodeType":"134","messageId":"130","endLine":13,"endColumn":18},{"ruleId":"141","severity":1,"message":"142","line":15,"column":50,"nodeType":"143","messageId":"144","endLine":15,"endColumn":55},{"ruleId":"127","severity":1,"message":"128","line":10,"column":33,"nodeType":"134","messageId":"130","endLine":10,"endColumn":54},{"ruleId":"127","severity":1,"message":"128","line":9,"column":22,"nodeType":"134","messageId":"130","endLine":9,"endColumn":56},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","Argument 'config' should be typed.","Identifier","missingArgType","ArrowFunctionExpression","@typescript-eslint/no-unused-vars","'grid' is assigned a value but never used.","unusedVar","'useRef' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull"]